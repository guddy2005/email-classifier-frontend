{"ast":null,"code":"var _jsxFileName = \"/home/guddy/code/project/client/src/contexts/EmailContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useReducer, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { toast } from \"react-hot-toast\";\nimport io from \"socket.io-client\";\n\n// Create context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EmailContext = /*#__PURE__*/createContext();\n\n// Initial state\nconst initialState = {\n  emails: [],\n  filteredEmails: [],\n  selectedEmails: [],\n  currentEmail: null,\n  categories: {\n    inbox: {\n      count: 0,\n      emails: []\n    },\n    spam: {\n      count: 0,\n      emails: []\n    },\n    promotions: {\n      count: 0,\n      emails: []\n    },\n    social: {\n      count: 0,\n      emails: []\n    },\n    updates: {\n      count: 0,\n      emails: []\n    },\n    forums: {\n      count: 0,\n      emails: []\n    },\n    important: {\n      count: 0,\n      emails: []\n    }\n  },\n  filters: {\n    search: \"\",\n    category: \"all\",\n    dateRange: null,\n    isRead: null,\n    sortBy: \"date\",\n    sortOrder: \"desc\"\n  },\n  pagination: {\n    currentPage: 1,\n    totalPages: 1,\n    totalEmails: 0,\n    emailsPerPage: 20,\n    startIndex: 0,\n    endIndex: 20\n  },\n  loading: false,\n  syncing: false,\n  error: null,\n  aiStats: {\n    totalProcessed: 0,\n    accuracy: 0,\n    lastTrained: null\n  },\n  emailAccounts: [],\n  syncHistory: []\n};\n\n// Action types\nconst EMAIL_ACTIONS = {\n  SET_LOADING: \"SET_LOADING\",\n  SET_SYNCING: \"SET_SYNCING\",\n  SET_ERROR: \"SET_ERROR\",\n  CLEAR_ERROR: \"CLEAR_ERROR\",\n  FETCH_EMAILS_SUCCESS: \"FETCH_EMAILS_SUCCESS\",\n  FETCH_EMAIL_DETAIL_SUCCESS: \"FETCH_EMAIL_DETAIL_SUCCESS\",\n  ADD_EMAIL: \"ADD_EMAIL\",\n  UPDATE_EMAIL: \"UPDATE_EMAIL\",\n  DELETE_EMAIL: \"DELETE_EMAIL\",\n  BULK_UPDATE_EMAILS: \"BULK_UPDATE_EMAILS\",\n  UPDATE_CATEGORIES: \"UPDATE_CATEGORIES\",\n  SET_FILTERS: \"SET_FILTERS\",\n  SET_SEARCH: \"SET_SEARCH\",\n  CLEAR_FILTERS: \"CLEAR_FILTERS\",\n  SELECT_EMAIL: \"SELECT_EMAIL\",\n  SELECT_MULTIPLE_EMAILS: \"SELECT_MULTIPLE_EMAILS\",\n  CLEAR_SELECTION: \"CLEAR_SELECTION\",\n  SELECT_ALL: \"SELECT_ALL\",\n  SET_PAGE: \"SET_PAGE\",\n  UPDATE_PAGINATION: \"UPDATE_PAGINATION\",\n  FETCH_ACCOUNTS_SUCCESS: \"FETCH_ACCOUNTS_SUCCESS\",\n  ADD_ACCOUNT_SUCCESS: \"ADD_ACCOUNT_SUCCESS\",\n  REMOVE_ACCOUNT_SUCCESS: \"REMOVE_ACCOUNT_SUCCESS\",\n  UPDATE_AI_STATS: \"UPDATE_AI_STATS\",\n  REAL_TIME_EMAIL_RECEIVED: \"REAL_TIME_EMAIL_RECEIVED\",\n  REAL_TIME_EMAIL_CLASSIFIED: \"REAL_TIME_EMAIL_CLASSIFIED\",\n  REAL_TIME_STATS_UPDATE: \"REAL_TIME_STATS_UPDATE\"\n};\n\n// Helper functions\nconst categorizeEmails = emails => {\n  if (!emails || !Array.isArray(emails)) emails = [];\n  const categories = {\n    inbox: {\n      count: 0,\n      emails: []\n    },\n    spam: {\n      count: 0,\n      emails: []\n    },\n    promotions: {\n      count: 0,\n      emails: []\n    },\n    social: {\n      count: 0,\n      emails: []\n    },\n    updates: {\n      count: 0,\n      emails: []\n    },\n    forums: {\n      count: 0,\n      emails: []\n    },\n    important: {\n      count: 0,\n      emails: []\n    }\n  };\n  emails.forEach(email => {\n    var _email$aiClassificati;\n    const category = ((_email$aiClassificati = email.aiClassification) === null || _email$aiClassificati === void 0 ? void 0 : _email$aiClassificati.category) || \"inbox\";\n    if (categories[category]) {\n      categories[category].emails.push(email);\n      categories[category].count++;\n    }\n  });\n  return categories;\n};\nconst applyFilters = (emails, filters) => {\n  if (!emails || !Array.isArray(emails)) return [];\n  let filtered = [...emails];\n  if (filters.search) {\n    const searchTerm = filters.search.toLowerCase();\n    filtered = filtered.filter(email => email.subject.toLowerCase().includes(searchTerm) || email.sender.toLowerCase().includes(searchTerm) || email.snippet.toLowerCase().includes(searchTerm));\n  }\n  if (filters.category && filters.category !== \"all\") {\n    filtered = filtered.filter(email => {\n      var _email$aiClassificati2;\n      return ((_email$aiClassificati2 = email.aiClassification) === null || _email$aiClassificati2 === void 0 ? void 0 : _email$aiClassificati2.category) === filters.category;\n    });\n  }\n  if (filters.isRead !== null) {\n    filtered = filtered.filter(email => email.isRead === filters.isRead);\n  }\n  if (filters.dateRange) {\n    const {\n      startDate,\n      endDate\n    } = filters.dateRange;\n    filtered = filtered.filter(email => {\n      const emailDate = new Date(email.date);\n      return emailDate >= startDate && emailDate <= endDate;\n    });\n  }\n  filtered.sort((a, b) => {\n    const order = filters.sortOrder === \"asc\" ? 1 : -1;\n    switch (filters.sortBy) {\n      case \"date\":\n        return (new Date(a.date) - new Date(b.date)) * order;\n      case \"sender\":\n        return a.sender.localeCompare(b.sender) * order;\n      case \"subject\":\n        return a.subject.localeCompare(b.subject) * order;\n      default:\n        return 0;\n    }\n  });\n  return filtered;\n};\nconst calculatePagination = (totalEmails, currentPage, emailsPerPage) => {\n  const totalPages = Math.ceil(totalEmails / emailsPerPage) || 1;\n  const validCurrentPage = Math.min(Math.max(1, currentPage), totalPages);\n  return {\n    currentPage: validCurrentPage,\n    totalPages,\n    totalEmails,\n    emailsPerPage,\n    startIndex: (validCurrentPage - 1) * emailsPerPage,\n    endIndex: validCurrentPage * emailsPerPage\n  };\n};\n\n// Reducer\nconst emailReducer = (state, action) => {\n  var _state$currentEmail;\n  switch (action.type) {\n    case EMAIL_ACTIONS.SET_LOADING:\n      return {\n        ...state,\n        loading: action.payload\n      };\n    case EMAIL_ACTIONS.SET_SYNCING:\n      return {\n        ...state,\n        syncing: action.payload\n      };\n    case EMAIL_ACTIONS.SET_ERROR:\n      return {\n        ...state,\n        error: action.payload,\n        loading: false,\n        syncing: false\n      };\n    case EMAIL_ACTIONS.CLEAR_ERROR:\n      return {\n        ...state,\n        error: null\n      };\n    case EMAIL_ACTIONS.FETCH_EMAILS_SUCCESS:\n      const emails = action.payload || [];\n      const categories = categorizeEmails(emails);\n      const filteredEmails = applyFilters(emails, state.filters);\n      const pagination = calculatePagination(filteredEmails.length, 1, state.pagination.emailsPerPage);\n      return {\n        ...state,\n        emails,\n        filteredEmails,\n        categories,\n        pagination,\n        loading: false,\n        error: null\n      };\n    case EMAIL_ACTIONS.FETCH_EMAIL_DETAIL_SUCCESS:\n      return {\n        ...state,\n        currentEmail: action.payload,\n        loading: false\n      };\n    case EMAIL_ACTIONS.ADD_EMAIL:\n      const newEmails = [action.payload, ...state.emails];\n      return {\n        ...state,\n        emails: newEmails,\n        filteredEmails: applyFilters(newEmails, state.filters),\n        categories: categorizeEmails(newEmails)\n      };\n    case EMAIL_ACTIONS.UPDATE_EMAIL:\n      const updatedEmails = state.emails.map(email => email.id === action.payload.id ? {\n        ...email,\n        ...action.payload\n      } : email);\n      return {\n        ...state,\n        emails: updatedEmails,\n        filteredEmails: applyFilters(updatedEmails, state.filters),\n        categories: categorizeEmails(updatedEmails),\n        currentEmail: ((_state$currentEmail = state.currentEmail) === null || _state$currentEmail === void 0 ? void 0 : _state$currentEmail.id) === action.payload.id ? {\n          ...state.currentEmail,\n          ...action.payload\n        } : state.currentEmail\n      };\n    case EMAIL_ACTIONS.DELETE_EMAIL:\n      const remainingEmails = state.emails.filter(email => email.id !== action.payload);\n      return {\n        ...state,\n        emails: remainingEmails,\n        filteredEmails: applyFilters(remainingEmails, state.filters),\n        categories: categorizeEmails(remainingEmails),\n        selectedEmails: state.selectedEmails.filter(id => id !== action.payload)\n      };\n    case EMAIL_ACTIONS.SET_FILTERS:\n      const newFilters = {\n        ...state.filters,\n        ...action.payload\n      };\n      const filtered = applyFilters(state.emails, newFilters);\n      return {\n        ...state,\n        filters: newFilters,\n        filteredEmails: filtered,\n        pagination: calculatePagination(filtered.length, 1, state.pagination.emailsPerPage)\n      };\n    case EMAIL_ACTIONS.SET_SEARCH:\n      const searchFilters = {\n        ...state.filters,\n        search: action.payload\n      };\n      const searchFiltered = applyFilters(state.emails, searchFilters);\n      return {\n        ...state,\n        filters: searchFilters,\n        filteredEmails: searchFiltered,\n        pagination: calculatePagination(searchFiltered.length, 1, state.pagination.emailsPerPage)\n      };\n    default:\n      return state;\n  }\n};\n\n// API setup\nconst api = axios;\n\n// EmailProvider\nexport const EmailProvider = ({\n  children\n}) => {\n  _s();\n  const [state, dispatch] = useReducer(emailReducer, initialState);\n\n  // Socket for real-time updates\n  useEffect(() => {\n    const token = localStorage.getItem(\"token\");\n    if (!token) return;\n    const socket = io({\n      auth: {\n        token\n      }\n    });\n    socket.on(\"emailReceived\", email => {\n      dispatch({\n        type: EMAIL_ACTIONS.FETCH_EMAILS_SUCCESS,\n        payload: [email, ...state.emails]\n      });\n      toast.success(`New email from ${email.sender}`);\n    });\n    return () => socket.disconnect();\n  }, [state.emails]);\n\n  // Fetch emails\n  const fetchEmails = async () => {\n    dispatch({\n      type: EMAIL_ACTIONS.SET_LOADING,\n      payload: true\n    });\n    try {\n      const res = await api.get(\"/emails\");\n      dispatch({\n        type: EMAIL_ACTIONS.FETCH_EMAILS_SUCCESS,\n        payload: res.data.emails || []\n      });\n      return {\n        success: true,\n        data: res.data\n      };\n    } catch (err) {\n      var _err$response, _err$response$data;\n      const message = ((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.message) || \"Failed to fetch emails\";\n      dispatch({\n        type: EMAIL_ACTIONS.SET_ERROR,\n        payload: message\n      });\n      toast.error(message);\n      return {\n        success: false,\n        error: message\n      };\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(EmailContext.Provider, {\n    value: {\n      ...state,\n      fetchEmails\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 319,\n    columnNumber: 5\n  }, this);\n};\n\n// Hook\n_s(EmailProvider, \"bgCdjuTOmPdSBRwTap80EFd9Y3U=\");\n_c = EmailProvider;\nexport const useEmail = () => {\n  _s2();\n  const context = useContext(EmailContext);\n  if (!context) throw new Error(\"useEmail must be used within EmailProvider\");\n  return context;\n};\n_s2(useEmail, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport default EmailContext;\nvar _c;\n$RefreshReg$(_c, \"EmailProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","useEffect","axios","toast","io","jsxDEV","_jsxDEV","EmailContext","initialState","emails","filteredEmails","selectedEmails","currentEmail","categories","inbox","count","spam","promotions","social","updates","forums","important","filters","search","category","dateRange","isRead","sortBy","sortOrder","pagination","currentPage","totalPages","totalEmails","emailsPerPage","startIndex","endIndex","loading","syncing","error","aiStats","totalProcessed","accuracy","lastTrained","emailAccounts","syncHistory","EMAIL_ACTIONS","SET_LOADING","SET_SYNCING","SET_ERROR","CLEAR_ERROR","FETCH_EMAILS_SUCCESS","FETCH_EMAIL_DETAIL_SUCCESS","ADD_EMAIL","UPDATE_EMAIL","DELETE_EMAIL","BULK_UPDATE_EMAILS","UPDATE_CATEGORIES","SET_FILTERS","SET_SEARCH","CLEAR_FILTERS","SELECT_EMAIL","SELECT_MULTIPLE_EMAILS","CLEAR_SELECTION","SELECT_ALL","SET_PAGE","UPDATE_PAGINATION","FETCH_ACCOUNTS_SUCCESS","ADD_ACCOUNT_SUCCESS","REMOVE_ACCOUNT_SUCCESS","UPDATE_AI_STATS","REAL_TIME_EMAIL_RECEIVED","REAL_TIME_EMAIL_CLASSIFIED","REAL_TIME_STATS_UPDATE","categorizeEmails","Array","isArray","forEach","email","_email$aiClassificati","aiClassification","push","applyFilters","filtered","searchTerm","toLowerCase","filter","subject","includes","sender","snippet","_email$aiClassificati2","startDate","endDate","emailDate","Date","date","sort","a","b","order","localeCompare","calculatePagination","Math","ceil","validCurrentPage","min","max","emailReducer","state","action","_state$currentEmail","type","payload","length","newEmails","updatedEmails","map","id","remainingEmails","newFilters","searchFilters","searchFiltered","api","EmailProvider","children","_s","dispatch","token","localStorage","getItem","socket","auth","on","success","disconnect","fetchEmails","res","get","data","err","_err$response","_err$response$data","message","response","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useEmail","_s2","context","Error","$RefreshReg$"],"sources":["/home/guddy/code/project/client/src/contexts/EmailContext.js"],"sourcesContent":["import React, { createContext, useContext, useReducer, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { toast } from \"react-hot-toast\";\nimport io from \"socket.io-client\";\n\n// Create context\nconst EmailContext = createContext();\n\n// Initial state\nconst initialState = {\n  emails: [],\n  filteredEmails: [],\n  selectedEmails: [],\n  currentEmail: null,\n  categories: {\n    inbox: { count: 0, emails: [] },\n    spam: { count: 0, emails: [] },\n    promotions: { count: 0, emails: [] },\n    social: { count: 0, emails: [] },\n    updates: { count: 0, emails: [] },\n    forums: { count: 0, emails: [] },\n    important: { count: 0, emails: [] },\n  },\n  filters: {\n    search: \"\",\n    category: \"all\",\n    dateRange: null,\n    isRead: null,\n    sortBy: \"date\",\n    sortOrder: \"desc\",\n  },\n  pagination: {\n    currentPage: 1,\n    totalPages: 1,\n    totalEmails: 0,\n    emailsPerPage: 20,\n    startIndex: 0,\n    endIndex: 20,\n  },\n  loading: false,\n  syncing: false,\n  error: null,\n  aiStats: {\n    totalProcessed: 0,\n    accuracy: 0,\n    lastTrained: null,\n  },\n  emailAccounts: [],\n  syncHistory: [],\n};\n\n// Action types\nconst EMAIL_ACTIONS = {\n  SET_LOADING: \"SET_LOADING\",\n  SET_SYNCING: \"SET_SYNCING\",\n  SET_ERROR: \"SET_ERROR\",\n  CLEAR_ERROR: \"CLEAR_ERROR\",\n  FETCH_EMAILS_SUCCESS: \"FETCH_EMAILS_SUCCESS\",\n  FETCH_EMAIL_DETAIL_SUCCESS: \"FETCH_EMAIL_DETAIL_SUCCESS\",\n  ADD_EMAIL: \"ADD_EMAIL\",\n  UPDATE_EMAIL: \"UPDATE_EMAIL\",\n  DELETE_EMAIL: \"DELETE_EMAIL\",\n  BULK_UPDATE_EMAILS: \"BULK_UPDATE_EMAILS\",\n  UPDATE_CATEGORIES: \"UPDATE_CATEGORIES\",\n  SET_FILTERS: \"SET_FILTERS\",\n  SET_SEARCH: \"SET_SEARCH\",\n  CLEAR_FILTERS: \"CLEAR_FILTERS\",\n  SELECT_EMAIL: \"SELECT_EMAIL\",\n  SELECT_MULTIPLE_EMAILS: \"SELECT_MULTIPLE_EMAILS\",\n  CLEAR_SELECTION: \"CLEAR_SELECTION\",\n  SELECT_ALL: \"SELECT_ALL\",\n  SET_PAGE: \"SET_PAGE\",\n  UPDATE_PAGINATION: \"UPDATE_PAGINATION\",\n  FETCH_ACCOUNTS_SUCCESS: \"FETCH_ACCOUNTS_SUCCESS\",\n  ADD_ACCOUNT_SUCCESS: \"ADD_ACCOUNT_SUCCESS\",\n  REMOVE_ACCOUNT_SUCCESS: \"REMOVE_ACCOUNT_SUCCESS\",\n  UPDATE_AI_STATS: \"UPDATE_AI_STATS\",\n  REAL_TIME_EMAIL_RECEIVED: \"REAL_TIME_EMAIL_RECEIVED\",\n  REAL_TIME_EMAIL_CLASSIFIED: \"REAL_TIME_EMAIL_CLASSIFIED\",\n  REAL_TIME_STATS_UPDATE: \"REAL_TIME_STATS_UPDATE\",\n};\n\n// Helper functions\nconst categorizeEmails = (emails) => {\n  if (!emails || !Array.isArray(emails)) emails = [];\n  const categories = {\n    inbox: { count: 0, emails: [] },\n    spam: { count: 0, emails: [] },\n    promotions: { count: 0, emails: [] },\n    social: { count: 0, emails: [] },\n    updates: { count: 0, emails: [] },\n    forums: { count: 0, emails: [] },\n    important: { count: 0, emails: [] },\n  };\n\n  emails.forEach((email) => {\n    const category = email.aiClassification?.category || \"inbox\";\n    if (categories[category]) {\n      categories[category].emails.push(email);\n      categories[category].count++;\n    }\n  });\n\n  return categories;\n};\n\nconst applyFilters = (emails, filters) => {\n  if (!emails || !Array.isArray(emails)) return [];\n\n  let filtered = [...emails];\n\n  if (filters.search) {\n    const searchTerm = filters.search.toLowerCase();\n    filtered = filtered.filter(\n      (email) =>\n        email.subject.toLowerCase().includes(searchTerm) ||\n        email.sender.toLowerCase().includes(searchTerm) ||\n        email.snippet.toLowerCase().includes(searchTerm),\n    );\n  }\n\n  if (filters.category && filters.category !== \"all\") {\n    filtered = filtered.filter(\n      (email) => email.aiClassification?.category === filters.category,\n    );\n  }\n\n  if (filters.isRead !== null) {\n    filtered = filtered.filter((email) => email.isRead === filters.isRead);\n  }\n\n  if (filters.dateRange) {\n    const { startDate, endDate } = filters.dateRange;\n    filtered = filtered.filter((email) => {\n      const emailDate = new Date(email.date);\n      return emailDate >= startDate && emailDate <= endDate;\n    });\n  }\n\n  filtered.sort((a, b) => {\n    const order = filters.sortOrder === \"asc\" ? 1 : -1;\n    switch (filters.sortBy) {\n      case \"date\":\n        return (new Date(a.date) - new Date(b.date)) * order;\n      case \"sender\":\n        return a.sender.localeCompare(b.sender) * order;\n      case \"subject\":\n        return a.subject.localeCompare(b.subject) * order;\n      default:\n        return 0;\n    }\n  });\n\n  return filtered;\n};\n\nconst calculatePagination = (totalEmails, currentPage, emailsPerPage) => {\n  const totalPages = Math.ceil(totalEmails / emailsPerPage) || 1;\n  const validCurrentPage = Math.min(Math.max(1, currentPage), totalPages);\n\n  return {\n    currentPage: validCurrentPage,\n    totalPages,\n    totalEmails,\n    emailsPerPage,\n    startIndex: (validCurrentPage - 1) * emailsPerPage,\n    endIndex: validCurrentPage * emailsPerPage,\n  };\n};\n\n// Reducer\nconst emailReducer = (state, action) => {\n  switch (action.type) {\n    case EMAIL_ACTIONS.SET_LOADING:\n      return { ...state, loading: action.payload };\n    case EMAIL_ACTIONS.SET_SYNCING:\n      return { ...state, syncing: action.payload };\n    case EMAIL_ACTIONS.SET_ERROR:\n      return {\n        ...state,\n        error: action.payload,\n        loading: false,\n        syncing: false,\n      };\n    case EMAIL_ACTIONS.CLEAR_ERROR:\n      return { ...state, error: null };\n    case EMAIL_ACTIONS.FETCH_EMAILS_SUCCESS:\n      const emails = action.payload || [];\n      const categories = categorizeEmails(emails);\n      const filteredEmails = applyFilters(emails, state.filters);\n      const pagination = calculatePagination(\n        filteredEmails.length,\n        1,\n        state.pagination.emailsPerPage,\n      );\n      return {\n        ...state,\n        emails,\n        filteredEmails,\n        categories,\n        pagination,\n        loading: false,\n        error: null,\n      };\n    case EMAIL_ACTIONS.FETCH_EMAIL_DETAIL_SUCCESS:\n      return { ...state, currentEmail: action.payload, loading: false };\n    case EMAIL_ACTIONS.ADD_EMAIL:\n      const newEmails = [action.payload, ...state.emails];\n      return {\n        ...state,\n        emails: newEmails,\n        filteredEmails: applyFilters(newEmails, state.filters),\n        categories: categorizeEmails(newEmails),\n      };\n    case EMAIL_ACTIONS.UPDATE_EMAIL:\n      const updatedEmails = state.emails.map((email) =>\n        email.id === action.payload.id\n          ? { ...email, ...action.payload }\n          : email,\n      );\n      return {\n        ...state,\n        emails: updatedEmails,\n        filteredEmails: applyFilters(updatedEmails, state.filters),\n        categories: categorizeEmails(updatedEmails),\n        currentEmail:\n          state.currentEmail?.id === action.payload.id\n            ? { ...state.currentEmail, ...action.payload }\n            : state.currentEmail,\n      };\n    case EMAIL_ACTIONS.DELETE_EMAIL:\n      const remainingEmails = state.emails.filter(\n        (email) => email.id !== action.payload,\n      );\n      return {\n        ...state,\n        emails: remainingEmails,\n        filteredEmails: applyFilters(remainingEmails, state.filters),\n        categories: categorizeEmails(remainingEmails),\n        selectedEmails: state.selectedEmails.filter(\n          (id) => id !== action.payload,\n        ),\n      };\n    case EMAIL_ACTIONS.SET_FILTERS:\n      const newFilters = { ...state.filters, ...action.payload };\n      const filtered = applyFilters(state.emails, newFilters);\n      return {\n        ...state,\n        filters: newFilters,\n        filteredEmails: filtered,\n        pagination: calculatePagination(\n          filtered.length,\n          1,\n          state.pagination.emailsPerPage,\n        ),\n      };\n    case EMAIL_ACTIONS.SET_SEARCH:\n      const searchFilters = { ...state.filters, search: action.payload };\n      const searchFiltered = applyFilters(state.emails, searchFilters);\n      return {\n        ...state,\n        filters: searchFilters,\n        filteredEmails: searchFiltered,\n        pagination: calculatePagination(\n          searchFiltered.length,\n          1,\n          state.pagination.emailsPerPage,\n        ),\n      };\n    default:\n      return state;\n  }\n};\n\n// API setup\nconst api = axios;\n\n// EmailProvider\nexport const EmailProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(emailReducer, initialState);\n\n  // Socket for real-time updates\n  useEffect(() => {\n    const token = localStorage.getItem(\"token\");\n    if (!token) return;\n\n    const socket = io({ auth: { token } });\n\n    socket.on(\"emailReceived\", (email) => {\n      dispatch({\n        type: EMAIL_ACTIONS.FETCH_EMAILS_SUCCESS,\n        payload: [email, ...state.emails],\n      });\n      toast.success(`New email from ${email.sender}`);\n    });\n\n    return () => socket.disconnect();\n  }, [state.emails]);\n\n  // Fetch emails\n  const fetchEmails = async () => {\n    dispatch({ type: EMAIL_ACTIONS.SET_LOADING, payload: true });\n    try {\n      const res = await api.get(\"/emails\");\n      dispatch({\n        type: EMAIL_ACTIONS.FETCH_EMAILS_SUCCESS,\n        payload: res.data.emails || [],\n      });\n      return { success: true, data: res.data };\n    } catch (err) {\n      const message = err.response?.data?.message || \"Failed to fetch emails\";\n      dispatch({ type: EMAIL_ACTIONS.SET_ERROR, payload: message });\n      toast.error(message);\n      return { success: false, error: message };\n    }\n  };\n\n  return (\n    <EmailContext.Provider value={{ ...state, fetchEmails }}>\n      {children}\n    </EmailContext.Provider>\n  );\n};\n\n// Hook\nexport const useEmail = () => {\n  const context = useContext(EmailContext);\n  if (!context) throw new Error(\"useEmail must be used within EmailProvider\");\n  return context;\n};\n\nexport default EmailContext;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}