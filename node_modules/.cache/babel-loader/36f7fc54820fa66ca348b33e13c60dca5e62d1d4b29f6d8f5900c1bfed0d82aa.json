{"ast":null,"code":"var _jsxFileName = \"/persistent/home/guddy/code/project/client/src/contexts/EmailContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useReducer, useEffect } from 'react';\nimport axios from 'axios';\nimport { toast } from 'react-hot-toast';\nimport io from 'socket.io-client';\n\n// Create context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EmailContext = /*#__PURE__*/createContext();\n\n// Initial state\nconst initialState = {\n  emails: [],\n  filteredEmails: [],\n  selectedEmails: [],\n  currentEmail: null,\n  categories: {\n    inbox: {\n      count: 0,\n      emails: []\n    },\n    spam: {\n      count: 0,\n      emails: []\n    },\n    promotions: {\n      count: 0,\n      emails: []\n    },\n    social: {\n      count: 0,\n      emails: []\n    },\n    updates: {\n      count: 0,\n      emails: []\n    },\n    forums: {\n      count: 0,\n      emails: []\n    },\n    important: {\n      count: 0,\n      emails: []\n    }\n  },\n  filters: {\n    search: '',\n    category: 'all',\n    dateRange: null,\n    isRead: null,\n    sortBy: 'date',\n    sortOrder: 'desc'\n  },\n  pagination: {\n    currentPage: 1,\n    totalPages: 1,\n    totalEmails: 0,\n    emailsPerPage: 20\n  },\n  loading: false,\n  syncing: false,\n  error: null,\n  aiStats: {\n    totalProcessed: 0,\n    accuracy: 0,\n    lastTrained: null\n  },\n  emailAccounts: [],\n  syncHistory: []\n};\n\n// Action types\nconst EMAIL_ACTIONS = {\n  SET_LOADING: 'SET_LOADING',\n  SET_SYNCING: 'SET_SYNCING',\n  SET_ERROR: 'SET_ERROR',\n  CLEAR_ERROR: 'CLEAR_ERROR',\n  // Email operations\n  FETCH_EMAILS_SUCCESS: 'FETCH_EMAILS_SUCCESS',\n  FETCH_EMAIL_DETAIL_SUCCESS: 'FETCH_EMAIL_DETAIL_SUCCESS',\n  ADD_EMAIL: 'ADD_EMAIL',\n  UPDATE_EMAIL: 'UPDATE_EMAIL',\n  DELETE_EMAIL: 'DELETE_EMAIL',\n  BULK_UPDATE_EMAILS: 'BULK_UPDATE_EMAILS',\n  // Categories and classification\n  UPDATE_CATEGORIES: 'UPDATE_CATEGORIES',\n  CLASSIFY_EMAIL_SUCCESS: 'CLASSIFY_EMAIL_SUCCESS',\n  RECLASSIFY_EMAIL_SUCCESS: 'RECLASSIFY_EMAIL_SUCCESS',\n  // Filters and search\n  SET_FILTERS: 'SET_FILTERS',\n  SET_SEARCH: 'SET_SEARCH',\n  APPLY_FILTERS: 'APPLY_FILTERS',\n  CLEAR_FILTERS: 'CLEAR_FILTERS',\n  // Selection\n  SELECT_EMAIL: 'SELECT_EMAIL',\n  SELECT_MULTIPLE_EMAILS: 'SELECT_MULTIPLE_EMAILS',\n  CLEAR_SELECTION: 'CLEAR_SELECTION',\n  SELECT_ALL: 'SELECT_ALL',\n  // Pagination\n  SET_PAGE: 'SET_PAGE',\n  UPDATE_PAGINATION: 'UPDATE_PAGINATION',\n  // Email accounts\n  FETCH_ACCOUNTS_SUCCESS: 'FETCH_ACCOUNTS_SUCCESS',\n  ADD_ACCOUNT_SUCCESS: 'ADD_ACCOUNT_SUCCESS',\n  REMOVE_ACCOUNT_SUCCESS: 'REMOVE_ACCOUNT_SUCCESS',\n  SYNC_ACCOUNT_SUCCESS: 'SYNC_ACCOUNT_SUCCESS',\n  // AI and stats\n  UPDATE_AI_STATS: 'UPDATE_AI_STATS',\n  RETRAIN_MODEL_SUCCESS: 'RETRAIN_MODEL_SUCCESS',\n  // Real-time updates\n  REAL_TIME_EMAIL_RECEIVED: 'REAL_TIME_EMAIL_RECEIVED',\n  REAL_TIME_EMAIL_CLASSIFIED: 'REAL_TIME_EMAIL_CLASSIFIED',\n  REAL_TIME_STATS_UPDATE: 'REAL_TIME_STATS_UPDATE'\n};\n\n// Helper functions\nconst categorizeEmails = emails => {\n  const categories = {\n    inbox: {\n      count: 0,\n      emails: []\n    },\n    spam: {\n      count: 0,\n      emails: []\n    },\n    promotions: {\n      count: 0,\n      emails: []\n    },\n    social: {\n      count: 0,\n      emails: []\n    },\n    updates: {\n      count: 0,\n      emails: []\n    },\n    forums: {\n      count: 0,\n      emails: []\n    },\n    important: {\n      count: 0,\n      emails: []\n    }\n  };\n  emails.forEach(email => {\n    var _email$aiClassificati;\n    const category = ((_email$aiClassificati = email.aiClassification) === null || _email$aiClassificati === void 0 ? void 0 : _email$aiClassificati.category) || 'inbox';\n    if (categories[category]) {\n      categories[category].emails.push(email);\n      categories[category].count++;\n    }\n  });\n  return categories;\n};\nconst applyFilters = (emails, filters) => {\n  let filtered = [...emails];\n\n  // Search filter\n  if (filters.search) {\n    const searchTerm = filters.search.toLowerCase();\n    filtered = filtered.filter(email => email.subject.toLowerCase().includes(searchTerm) || email.sender.toLowerCase().includes(searchTerm) || email.snippet.toLowerCase().includes(searchTerm));\n  }\n\n  // Category filter\n  if (filters.category && filters.category !== 'all') {\n    filtered = filtered.filter(email => {\n      var _email$aiClassificati2;\n      return ((_email$aiClassificati2 = email.aiClassification) === null || _email$aiClassificati2 === void 0 ? void 0 : _email$aiClassificati2.category) === filters.category;\n    });\n  }\n\n  // Read status filter\n  if (filters.isRead !== null) {\n    filtered = filtered.filter(email => email.isRead === filters.isRead);\n  }\n\n  // Date range filter\n  if (filters.dateRange) {\n    const {\n      startDate,\n      endDate\n    } = filters.dateRange;\n    filtered = filtered.filter(email => {\n      const emailDate = new Date(email.date);\n      return emailDate >= startDate && emailDate <= endDate;\n    });\n  }\n\n  // Sort emails\n  filtered.sort((a, b) => {\n    const order = filters.sortOrder === 'asc' ? 1 : -1;\n    switch (filters.sortBy) {\n      case 'date':\n        return (new Date(a.date) - new Date(b.date)) * order;\n      case 'sender':\n        return a.sender.localeCompare(b.sender) * order;\n      case 'subject':\n        return a.subject.localeCompare(b.subject) * order;\n      case 'importance':\n        return (a.importance - b.importance) * order;\n      default:\n        return 0;\n    }\n  });\n  return filtered;\n};\nconst calculatePagination = (totalEmails, currentPage, emailsPerPage) => {\n  const totalPages = Math.ceil(totalEmails / emailsPerPage);\n  const validCurrentPage = Math.min(Math.max(1, currentPage), totalPages);\n  return {\n    currentPage: validCurrentPage,\n    totalPages,\n    totalEmails,\n    emailsPerPage,\n    startIndex: (validCurrentPage - 1) * emailsPerPage,\n    endIndex: validCurrentPage * emailsPerPage\n  };\n};\n\n// Reducer function\nconst emailReducer = (state, action) => {\n  var _state$currentEmail;\n  switch (action.type) {\n    case EMAIL_ACTIONS.SET_LOADING:\n      return {\n        ...state,\n        loading: action.payload\n      };\n    case EMAIL_ACTIONS.SET_SYNCING:\n      return {\n        ...state,\n        syncing: action.payload\n      };\n    case EMAIL_ACTIONS.SET_ERROR:\n      return {\n        ...state,\n        error: action.payload,\n        loading: false,\n        syncing: false\n      };\n    case EMAIL_ACTIONS.CLEAR_ERROR:\n      return {\n        ...state,\n        error: null\n      };\n    case EMAIL_ACTIONS.FETCH_EMAILS_SUCCESS:\n      const categorizedEmails = categorizeEmails(action.payload);\n      const filteredEmails = applyFilters(action.payload, state.filters);\n      const pagination = calculatePagination(filteredEmails.length, state.pagination.currentPage, state.pagination.emailsPerPage);\n      return {\n        ...state,\n        emails: action.payload,\n        filteredEmails,\n        categories: categorizedEmails,\n        pagination,\n        loading: false,\n        error: null\n      };\n    case EMAIL_ACTIONS.FETCH_EMAIL_DETAIL_SUCCESS:\n      return {\n        ...state,\n        currentEmail: action.payload,\n        loading: false\n      };\n    case EMAIL_ACTIONS.ADD_EMAIL:\n      const newEmails = [action.payload, ...state.emails];\n      const newCategories = categorizeEmails(newEmails);\n      const newFilteredEmails = applyFilters(newEmails, state.filters);\n      return {\n        ...state,\n        emails: newEmails,\n        filteredEmails: newFilteredEmails,\n        categories: newCategories,\n        pagination: calculatePagination(newFilteredEmails.length, state.pagination.currentPage, state.pagination.emailsPerPage)\n      };\n    case EMAIL_ACTIONS.UPDATE_EMAIL:\n      const updatedEmails = state.emails.map(email => email.id === action.payload.id ? {\n        ...email,\n        ...action.payload\n      } : email);\n      const updatedCategories = categorizeEmails(updatedEmails);\n      const updatedFilteredEmails = applyFilters(updatedEmails, state.filters);\n      return {\n        ...state,\n        emails: updatedEmails,\n        filteredEmails: updatedFilteredEmails,\n        categories: updatedCategories,\n        currentEmail: ((_state$currentEmail = state.currentEmail) === null || _state$currentEmail === void 0 ? void 0 : _state$currentEmail.id) === action.payload.id ? {\n          ...state.currentEmail,\n          ...action.payload\n        } : state.currentEmail\n      };\n    case EMAIL_ACTIONS.DELETE_EMAIL:\n      const remainingEmails = state.emails.filter(email => email.id !== action.payload);\n      const remainingCategories = categorizeEmails(remainingEmails);\n      const remainingFilteredEmails = applyFilters(remainingEmails, state.filters);\n      return {\n        ...state,\n        emails: remainingEmails,\n        filteredEmails: remainingFilteredEmails,\n        categories: remainingCategories,\n        selectedEmails: state.selectedEmails.filter(id => id !== action.payload),\n        pagination: calculatePagination(remainingFilteredEmails.length, state.pagination.currentPage, state.pagination.emailsPerPage)\n      };\n    case EMAIL_ACTIONS.BULK_UPDATE_EMAILS:\n      const bulkUpdatedEmails = state.emails.map(email => action.payload.ids.includes(email.id) ? {\n        ...email,\n        ...action.payload.updates\n      } : email);\n      const bulkUpdatedCategories = categorizeEmails(bulkUpdatedEmails);\n      const bulkUpdatedFilteredEmails = applyFilters(bulkUpdatedEmails, state.filters);\n      return {\n        ...state,\n        emails: bulkUpdatedEmails,\n        filteredEmails: bulkUpdatedFilteredEmails,\n        categories: bulkUpdatedCategories\n      };\n    case EMAIL_ACTIONS.SET_FILTERS:\n      const newFilters = {\n        ...state.filters,\n        ...action.payload\n      };\n      const newlyFilteredEmails = applyFilters(state.emails, newFilters);\n      return {\n        ...state,\n        filters: newFilters,\n        filteredEmails: newlyFilteredEmails,\n        pagination: calculatePagination(newlyFilteredEmails.length, 1,\n        // Reset to first page when filters change\n        state.pagination.emailsPerPage)\n      };\n    case EMAIL_ACTIONS.SET_SEARCH:\n      const searchFilters = {\n        ...state.filters,\n        search: action.payload\n      };\n      const searchFilteredEmails = applyFilters(state.emails, searchFilters);\n      return {\n        ...state,\n        filters: searchFilters,\n        filteredEmails: searchFilteredEmails,\n        pagination: calculatePagination(searchFilteredEmails.length, 1, state.pagination.emailsPerPage)\n      };\n    case EMAIL_ACTIONS.CLEAR_FILTERS:\n      const clearedFilters = {\n        search: '',\n        category: 'all',\n        dateRange: null,\n        isRead: null,\n        sortBy: 'date',\n        sortOrder: 'desc'\n      };\n      const clearedFilteredEmails = applyFilters(state.emails, clearedFilters);\n      return {\n        ...state,\n        filters: clearedFilters,\n        filteredEmails: clearedFilteredEmails,\n        pagination: calculatePagination(clearedFilteredEmails.length, 1, state.pagination.emailsPerPage)\n      };\n    case EMAIL_ACTIONS.SELECT_EMAIL:\n      const isSelected = state.selectedEmails.includes(action.payload);\n      const newSelectedEmails = isSelected ? state.selectedEmails.filter(id => id !== action.payload) : [...state.selectedEmails, action.payload];\n      return {\n        ...state,\n        selectedEmails: newSelectedEmails\n      };\n    case EMAIL_ACTIONS.SELECT_MULTIPLE_EMAILS:\n      return {\n        ...state,\n        selectedEmails: [...new Set([...state.selectedEmails, ...action.payload])]\n      };\n    case EMAIL_ACTIONS.CLEAR_SELECTION:\n      return {\n        ...state,\n        selectedEmails: []\n      };\n    case EMAIL_ACTIONS.SELECT_ALL:\n      const currentPageEmails = state.filteredEmails.slice(state.pagination.startIndex, state.pagination.endIndex);\n      const allCurrentPageIds = currentPageEmails.map(email => email.id);\n      return {\n        ...state,\n        selectedEmails: action.payload ? [...new Set([...state.selectedEmails, ...allCurrentPageIds])] : state.selectedEmails.filter(id => !allCurrentPageIds.includes(id))\n      };\n    case EMAIL_ACTIONS.SET_PAGE:\n      return {\n        ...state,\n        pagination: {\n          ...state.pagination,\n          currentPage: action.payload\n        }\n      };\n    case EMAIL_ACTIONS.FETCH_ACCOUNTS_SUCCESS:\n      return {\n        ...state,\n        emailAccounts: action.payload,\n        loading: false\n      };\n    case EMAIL_ACTIONS.ADD_ACCOUNT_SUCCESS:\n      return {\n        ...state,\n        emailAccounts: [...state.emailAccounts, action.payload],\n        loading: false\n      };\n    case EMAIL_ACTIONS.REMOVE_ACCOUNT_SUCCESS:\n      return {\n        ...state,\n        emailAccounts: state.emailAccounts.filter(account => account.id !== action.payload)\n      };\n    case EMAIL_ACTIONS.UPDATE_AI_STATS:\n      return {\n        ...state,\n        aiStats: {\n          ...state.aiStats,\n          ...action.payload\n        }\n      };\n    case EMAIL_ACTIONS.REAL_TIME_EMAIL_RECEIVED:\n      return {\n        ...state,\n        emails: [action.payload, ...state.emails],\n        categories: categorizeEmails([action.payload, ...state.emails])\n      };\n    case EMAIL_ACTIONS.REAL_TIME_EMAIL_CLASSIFIED:\n      const rtUpdatedEmails = state.emails.map(email => email.id === action.payload.id ? {\n        ...email,\n        aiClassification: action.payload.classification\n      } : email);\n      return {\n        ...state,\n        emails: rtUpdatedEmails,\n        categories: categorizeEmails(rtUpdatedEmails)\n      };\n    case EMAIL_ACTIONS.REAL_TIME_STATS_UPDATE:\n      return {\n        ...state,\n        aiStats: {\n          ...state.aiStats,\n          ...action.payload\n        }\n      };\n    default:\n      return state;\n  }\n};\n\n// API base URL\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\n\n// Create axios instance\nconst api = axios.create({\n  baseURL: API_URL,\n  timeout: 30000\n});\n\n// Add token to requests\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\n// Email Provider Component\nexport const EmailProvider = ({\n  children\n}) => {\n  _s();\n  const [state, dispatch] = useReducer(emailReducer, initialState);\n\n  // Socket connection for real-time updates\n  useEffect(() => {\n    const token = localStorage.getItem('token');\n    if (!token) return;\n    const socket = io(API_URL.replace('/api', ''), {\n      auth: {\n        token\n      }\n    });\n    socket.on('emailReceived', email => {\n      dispatch({\n        type: EMAIL_ACTIONS.REAL_TIME_EMAIL_RECEIVED,\n        payload: email\n      });\n      toast.success(`New email from ${email.sender}`);\n    });\n    socket.on('emailClassified', data => {\n      dispatch({\n        type: EMAIL_ACTIONS.REAL_TIME_EMAIL_CLASSIFIED,\n        payload: data\n      });\n    });\n    socket.on('statsUpdated', stats => {\n      dispatch({\n        type: EMAIL_ACTIONS.REAL_TIME_STATS_UPDATE,\n        payload: stats\n      });\n    });\n    return () => socket.disconnect();\n  }, []);\n\n  // Fetch emails\n  const fetchEmails = async (options = {}) => {\n    dispatch({\n      type: EMAIL_ACTIONS.SET_LOADING,\n      payload: true\n    });\n    try {\n      const response = await api.get('/emails', {\n        params: options\n      });\n      dispatch({\n        type: EMAIL_ACTIONS.FETCH_EMAILS_SUCCESS,\n        payload: response.data.emails\n      });\n      return {\n        success: true,\n        data: response.data\n      };\n    } catch (error) {\n      var _error$response, _error$response$data;\n      const errorMessage = ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Failed to fetch emails';\n      dispatch({\n        type: EMAIL_ACTIONS.SET_ERROR,\n        payload: errorMessage\n      });\n      toast.error(errorMessage);\n      return {\n        success: false,\n        error: errorMessage\n      };\n    }\n  };\n\n  // Fetch single email\n  const fetchEmail = async emailId => {\n    dispatch({\n      type: EMAIL_ACTIONS.SET_LOADING,\n      payload: true\n    });\n    try {\n      const response = await api.get(`/emails/${emailId}`);\n      dispatch({\n        type: EMAIL_ACTIONS.FETCH_EMAIL_DETAIL_SUCCESS,\n        payload: response.data.email\n      });\n      return {\n        success: true,\n        data: response.data.email\n      };\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      const errorMessage = ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || 'Failed to fetch email';\n      dispatch({\n        type: EMAIL_ACTIONS.SET_ERROR,\n        payload: errorMessage\n      });\n      return {\n        success: false,\n        error: errorMessage\n      };\n    }\n  };\n\n  // Classify email\n  const classifyEmail = async (emailId, category, isUserFeedback = false) => {\n    try {\n      const response = await api.post(`/emails/${emailId}/classify`, {\n        category,\n        isUserFeedback\n      });\n      dispatch({\n        type: EMAIL_ACTIONS.UPDATE_EMAIL,\n        payload: {\n          id: emailId,\n          aiClassification: response.data.classification\n        }\n      });\n      toast.success(`Email classified as ${category}`);\n      return {\n        success: true,\n        data: response.data\n      };\n    } catch (error) {\n      var _error$response3, _error$response3$data;\n      const errorMessage = ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.message) || 'Classification failed';\n      toast.error(errorMessage);\n      return {\n        success: false,\n        error: errorMessage\n      };\n    }\n  };\n\n  // Bulk operations\n  const bulkClassify = async (emailIds, category) => {\n    try {\n      const response = await api.post('/emails/bulk-classify', {\n        emailIds,\n        category\n      });\n      dispatch({\n        type: EMAIL_ACTIONS.BULK_UPDATE_EMAILS,\n        payload: {\n          ids: emailIds,\n          updates: {\n            aiClassification: {\n              category\n            }\n          }\n        }\n      });\n      toast.success(`${emailIds.length} emails classified as ${category}`);\n      return {\n        success: true,\n        data: response.data\n      };\n    } catch (error) {\n      var _error$response4, _error$response4$data;\n      const errorMessage = ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.message) || 'Bulk classification failed';\n      toast.error(errorMessage);\n      return {\n        success: false,\n        error: errorMessage\n      };\n    }\n  };\n\n  // Mark as read/unread\n  const markAsRead = async (emailIds, isRead = true) => {\n    try {\n      const response = await api.put('/emails/mark-read', {\n        emailIds: Array.isArray(emailIds) ? emailIds : [emailIds],\n        isRead\n      });\n      dispatch({\n        type: EMAIL_ACTIONS.BULK_UPDATE_EMAILS,\n        payload: {\n          ids: Array.isArray(emailIds) ? emailIds : [emailIds],\n          updates: {\n            isRead\n          }\n        }\n      });\n      return {\n        success: true,\n        data: response.data\n      };\n    } catch (error) {\n      var _error$response5, _error$response5$data;\n      const errorMessage = ((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : (_error$response5$data = _error$response5.data) === null || _error$response5$data === void 0 ? void 0 : _error$response5$data.message) || 'Failed to update read status';\n      toast.error(errorMessage);\n      return {\n        success: false,\n        error: errorMessage\n      };\n    }\n  };\n\n  // Delete emails\n  const deleteEmails = async emailIds => {\n    try {\n      await api.delete('/emails', {\n        data: {\n          emailIds: Array.isArray(emailIds) ? emailIds : [emailIds]\n        }\n      });\n      const idsToDelete = Array.isArray(emailIds) ? emailIds : [emailIds];\n      idsToDelete.forEach(id => {\n        dispatch({\n          type: EMAIL_ACTIONS.DELETE_EMAIL,\n          payload: id\n        });\n      });\n      toast.success(`${idsToDelete.length} email(s) deleted`);\n      return {\n        success: true\n      };\n    } catch (error) {\n      var _error$response6, _error$response6$data;\n      const errorMessage = ((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : (_error$response6$data = _error$response6.data) === null || _error$response6$data === void 0 ? void 0 : _error$response6$data.message) || 'Failed to delete emails';\n      toast.error(errorMessage);\n      return {\n        success: false,\n        error: errorMessage\n      };\n    }\n  };\n\n  // Sync email accounts\n  const syncEmailAccounts = async (accountId = null) => {\n    dispatch({\n      type: EMAIL_ACTIONS.SET_SYNCING,\n      payload: true\n    });\n    try {\n      const url = accountId ? `/sync/${accountId}` : '/sync';\n      const response = await api.post(url);\n      dispatch({\n        type: EMAIL_ACTIONS.SET_SYNCING,\n        payload: false\n      });\n      toast.success('Email sync completed');\n\n      // Refresh emails after sync\n      await fetchEmails();\n      return {\n        success: true,\n        data: response.data\n      };\n    } catch (error) {\n      var _error$response7, _error$response7$data;\n      dispatch({\n        type: EMAIL_ACTIONS.SET_SYNCING,\n        payload: false\n      });\n      const errorMessage = ((_error$response7 = error.response) === null || _error$response7 === void 0 ? void 0 : (_error$response7$data = _error$response7.data) === null || _error$response7$data === void 0 ? void 0 : _error$response7$data.message) || 'Sync failed';\n      toast.error(errorMessage);\n      return {\n        success: false,\n        error: errorMessage\n      };\n    }\n  };\n\n  // Add email account\n  const addEmailAccount = async accountData => {\n    dispatch({\n      type: EMAIL_ACTIONS.SET_LOADING,\n      payload: true\n    });\n    try {\n      const response = await api.post('/accounts', accountData);\n      dispatch({\n        type: EMAIL_ACTIONS.ADD_ACCOUNT_SUCCESS,\n        payload: response.data.account\n      });\n      toast.success('Email account added successfully');\n      return {\n        success: true,\n        data: response.data.account\n      };\n    } catch (error) {\n      var _error$response8, _error$response8$data;\n      dispatch({\n        type: EMAIL_ACTIONS.SET_LOADING,\n        payload: false\n      });\n      const errorMessage = ((_error$response8 = error.response) === null || _error$response8 === void 0 ? void 0 : (_error$response8$data = _error$response8.data) === null || _error$response8$data === void 0 ? void 0 : _error$response8$data.message) || 'Failed to add email account';\n      toast.error(errorMessage);\n      return {\n        success: false,\n        error: errorMessage\n      };\n    }\n  };\n\n  // Remove email account\n  const removeEmailAccount = async accountId => {\n    try {\n      await api.delete(`/accounts/${accountId}`);\n      dispatch({\n        type: EMAIL_ACTIONS.REMOVE_ACCOUNT_SUCCESS,\n        payload: accountId\n      });\n      toast.success('Email account removed');\n      return {\n        success: true\n      };\n    } catch (error) {\n      var _error$response9, _error$response9$data;\n      const errorMessage = ((_error$response9 = error.response) === null || _error$response9 === void 0 ? void 0 : (_error$response9$data = _error$response9.data) === null || _error$response9$data === void 0 ? void 0 : _error$response9$data.message) || 'Failed to remove email account';\n      toast.error(errorMessage);\n      return {\n        success: false,\n        error: errorMessage\n      };\n    }\n  };\n\n  // Fetch email accounts\n  const fetchEmailAccounts = async () => {\n    dispatch({\n      type: EMAIL_ACTIONS.SET_LOADING,\n      payload: true\n    });\n    try {\n      const response = await api.get('/accounts');\n      dispatch({\n        type: EMAIL_ACTIONS.FETCH_ACCOUNTS_SUCCESS,\n        payload: response.data.accounts\n      });\n      return {\n        success: true,\n        data: response.data.accounts\n      };\n    } catch (error) {\n      var _error$response0, _error$response0$data;\n      dispatch({\n        type: EMAIL_ACTIONS.SET_LOADING,\n        payload: false\n      });\n      const errorMessage = ((_error$response0 = error.response) === null || _error$response0 === void 0 ? void 0 : (_error$response0$data = _error$response0.data) === null || _error$response0$data === void 0 ? void 0 : _error$response0$data.message) || 'Failed to fetch email accounts';\n      dispatch({\n        type: EMAIL_ACTIONS.SET_ERROR,\n        payload: errorMessage\n      });\n      return {\n        success: false,\n        error: errorMessage\n      };\n    }\n  };\n\n  // Retrain AI model\n  const retrainModel = async () => {\n    dispatch({\n      type: EMAIL_ACTIONS.SET_LOADING,\n      payload: true\n    });\n    try {\n      const response = await api.post('/ai/retrain');\n      dispatch({\n        type: EMAIL_ACTIONS.UPDATE_AI_STATS,\n        payload: response.data.stats\n      });\n      dispatch({\n        type: EMAIL_ACTIONS.SET_LOADING,\n        payload: false\n      });\n      toast.success('AI model retrained successfully');\n      return {\n        success: true,\n        data: response.data\n      };\n    } catch (error) {\n      var _error$response1, _error$response1$data;\n      dispatch({\n        type: EMAIL_ACTIONS.SET_LOADING,\n        payload: false\n      });\n      const errorMessage = ((_error$response1 = error.response) === null || _error$response1 === void 0 ? void 0 : (_error$response1$data = _error$response1.data) === null || _error$response1$data === void 0 ? void 0 : _error$response1$data.message) || 'Failed to retrain model';\n      toast.error(errorMessage);\n      return {\n        success: false,\n        error: errorMessage\n      };\n    }\n  };\n\n  // Get AI statistics\n  const fetchAIStats = async () => {\n    try {\n      const response = await api.get('/ai/stats');\n      dispatch({\n        type: EMAIL_ACTIONS.UPDATE_AI_STATS,\n        payload: response.data.stats\n      });\n      return {\n        success: true,\n        data: response.data.stats\n      };\n    } catch (error) {\n      var _error$response10, _error$response10$dat;\n      const errorMessage = ((_error$response10 = error.response) === null || _error$response10 === void 0 ? void 0 : (_error$response10$dat = _error$response10.data) === null || _error$response10$dat === void 0 ? void 0 : _error$response10$dat.message) || 'Failed to fetch AI stats';\n      return {\n        success: false,\n        error: errorMessage\n      };\n    }\n  };\n\n  // Filter and search functions\n  const setFilters = filters => {\n    dispatch({\n      type: EMAIL_ACTIONS.SET_FILTERS,\n      payload: filters\n    });\n  };\n  const setSearch = searchTerm => {\n    dispatch({\n      type: EMAIL_ACTIONS.SET_SEARCH,\n      payload: searchTerm\n    });\n  };\n  const clearFilters = () => {\n    dispatch({\n      type: EMAIL_ACTIONS.CLEAR_FILTERS\n    });\n  };\n\n  // Selection functions\n  const selectEmail = emailId => {\n    dispatch({\n      type: EMAIL_ACTIONS.SELECT_EMAIL,\n      payload: emailId\n    });\n  };\n  const selectMultipleEmails = emailIds => {\n    dispatch({\n      type: EMAIL_ACTIONS.SELECT_MULTIPLE_EMAILS,\n      payload: emailIds\n    });\n  };\n  const clearSelection = () => {\n    dispatch({\n      type: EMAIL_ACTIONS.CLEAR_SELECTION\n    });\n  };\n  const selectAllOnPage = selectAll => {\n    dispatch({\n      type: EMAIL_ACTIONS.SELECT_ALL,\n      payload: selectAll\n    });\n  };\n\n  // Pagination functions\n  const setPage = page => {\n    dispatch({\n      type: EMAIL_ACTIONS.SET_PAGE,\n      payload: page\n    });\n  };\n\n  // Clear errors\n  const clearError = () => {\n    dispatch({\n      type: EMAIL_ACTIONS.CLEAR_ERROR\n    });\n  };\n\n  // Context value\n  const value = {\n    ...state,\n    fetchEmails,\n    fetchEmail,\n    classifyEmail,\n    bulkClassify,\n    markAsRead,\n    deleteEmails,\n    syncEmailAccounts,\n    addEmailAccount,\n    removeEmailAccount,\n    fetchEmailAccounts,\n    retrainModel,\n    fetchAIStats,\n    setFilters,\n    setSearch,\n    clearFilters,\n    selectEmail,\n    selectMultipleEmails,\n    clearSelection,\n    selectAllOnPage,\n    setPage,\n    clearError\n  };\n  return /*#__PURE__*/_jsxDEV(EmailContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 827,\n    columnNumber: 5\n  }, this);\n};\n\n// Custom hook to use email context\n_s(EmailProvider, \"bgCdjuTOmPdSBRwTap80EFd9Y3U=\");\n_c = EmailProvider;\nexport const useEmail = () => {\n  _s2();\n  const context = useContext(EmailContext);\n  if (!context) {\n    throw new Error('useEmail must be used within an EmailProvider');\n  }\n  return context;\n};\n_s2(useEmail, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport default EmailContext;\nvar _c;\n$RefreshReg$(_c, \"EmailProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","useEffect","axios","toast","io","jsxDEV","_jsxDEV","EmailContext","initialState","emails","filteredEmails","selectedEmails","currentEmail","categories","inbox","count","spam","promotions","social","updates","forums","important","filters","search","category","dateRange","isRead","sortBy","sortOrder","pagination","currentPage","totalPages","totalEmails","emailsPerPage","loading","syncing","error","aiStats","totalProcessed","accuracy","lastTrained","emailAccounts","syncHistory","EMAIL_ACTIONS","SET_LOADING","SET_SYNCING","SET_ERROR","CLEAR_ERROR","FETCH_EMAILS_SUCCESS","FETCH_EMAIL_DETAIL_SUCCESS","ADD_EMAIL","UPDATE_EMAIL","DELETE_EMAIL","BULK_UPDATE_EMAILS","UPDATE_CATEGORIES","CLASSIFY_EMAIL_SUCCESS","RECLASSIFY_EMAIL_SUCCESS","SET_FILTERS","SET_SEARCH","APPLY_FILTERS","CLEAR_FILTERS","SELECT_EMAIL","SELECT_MULTIPLE_EMAILS","CLEAR_SELECTION","SELECT_ALL","SET_PAGE","UPDATE_PAGINATION","FETCH_ACCOUNTS_SUCCESS","ADD_ACCOUNT_SUCCESS","REMOVE_ACCOUNT_SUCCESS","SYNC_ACCOUNT_SUCCESS","UPDATE_AI_STATS","RETRAIN_MODEL_SUCCESS","REAL_TIME_EMAIL_RECEIVED","REAL_TIME_EMAIL_CLASSIFIED","REAL_TIME_STATS_UPDATE","categorizeEmails","forEach","email","_email$aiClassificati","aiClassification","push","applyFilters","filtered","searchTerm","toLowerCase","filter","subject","includes","sender","snippet","_email$aiClassificati2","startDate","endDate","emailDate","Date","date","sort","a","b","order","localeCompare","importance","calculatePagination","Math","ceil","validCurrentPage","min","max","startIndex","endIndex","emailReducer","state","action","_state$currentEmail","type","payload","categorizedEmails","length","newEmails","newCategories","newFilteredEmails","updatedEmails","map","id","updatedCategories","updatedFilteredEmails","remainingEmails","remainingCategories","remainingFilteredEmails","bulkUpdatedEmails","ids","bulkUpdatedCategories","bulkUpdatedFilteredEmails","newFilters","newlyFilteredEmails","searchFilters","searchFilteredEmails","clearedFilters","clearedFilteredEmails","isSelected","newSelectedEmails","Set","currentPageEmails","slice","allCurrentPageIds","account","rtUpdatedEmails","classification","API_URL","process","env","REACT_APP_API_URL","api","create","baseURL","timeout","interceptors","request","use","config","token","localStorage","getItem","headers","Authorization","EmailProvider","children","_s","dispatch","socket","replace","auth","on","success","data","stats","disconnect","fetchEmails","options","response","get","params","_error$response","_error$response$data","errorMessage","message","fetchEmail","emailId","_error$response2","_error$response2$data","classifyEmail","isUserFeedback","post","_error$response3","_error$response3$data","bulkClassify","emailIds","_error$response4","_error$response4$data","markAsRead","put","Array","isArray","_error$response5","_error$response5$data","deleteEmails","delete","idsToDelete","_error$response6","_error$response6$data","syncEmailAccounts","accountId","url","_error$response7","_error$response7$data","addEmailAccount","accountData","_error$response8","_error$response8$data","removeEmailAccount","_error$response9","_error$response9$data","fetchEmailAccounts","accounts","_error$response0","_error$response0$data","retrainModel","_error$response1","_error$response1$data","fetchAIStats","_error$response10","_error$response10$dat","setFilters","setSearch","clearFilters","selectEmail","selectMultipleEmails","clearSelection","selectAllOnPage","selectAll","setPage","page","clearError","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useEmail","_s2","context","Error","$RefreshReg$"],"sources":["/persistent/home/guddy/code/project/client/src/contexts/EmailContext.js"],"sourcesContent":["import React, { createContext, useContext, useReducer, useEffect } from 'react';\nimport axios from 'axios';\nimport { toast } from 'react-hot-toast';\nimport io from 'socket.io-client';\n\n// Create context\nconst EmailContext = createContext();\n\n// Initial state\nconst initialState = {\n  emails: [],\n  filteredEmails: [],\n  selectedEmails: [],\n  currentEmail: null,\n  categories: {\n    inbox: { count: 0, emails: [] },\n    spam: { count: 0, emails: [] },\n    promotions: { count: 0, emails: [] },\n    social: { count: 0, emails: [] },\n    updates: { count: 0, emails: [] },\n    forums: { count: 0, emails: [] },\n    important: { count: 0, emails: [] },\n  },\n  filters: {\n    search: '',\n    category: 'all',\n    dateRange: null,\n    isRead: null,\n    sortBy: 'date',\n    sortOrder: 'desc',\n  },\n  pagination: {\n    currentPage: 1,\n    totalPages: 1,\n    totalEmails: 0,\n    emailsPerPage: 20,\n  },\n  loading: false,\n  syncing: false,\n  error: null,\n  aiStats: {\n    totalProcessed: 0,\n    accuracy: 0,\n    lastTrained: null,\n  },\n  emailAccounts: [],\n  syncHistory: [],\n};\n\n// Action types\nconst EMAIL_ACTIONS = {\n  SET_LOADING: 'SET_LOADING',\n  SET_SYNCING: 'SET_SYNCING',\n  SET_ERROR: 'SET_ERROR',\n  CLEAR_ERROR: 'CLEAR_ERROR',\n\n  // Email operations\n  FETCH_EMAILS_SUCCESS: 'FETCH_EMAILS_SUCCESS',\n  FETCH_EMAIL_DETAIL_SUCCESS: 'FETCH_EMAIL_DETAIL_SUCCESS',\n  ADD_EMAIL: 'ADD_EMAIL',\n  UPDATE_EMAIL: 'UPDATE_EMAIL',\n  DELETE_EMAIL: 'DELETE_EMAIL',\n  BULK_UPDATE_EMAILS: 'BULK_UPDATE_EMAILS',\n\n  // Categories and classification\n  UPDATE_CATEGORIES: 'UPDATE_CATEGORIES',\n  CLASSIFY_EMAIL_SUCCESS: 'CLASSIFY_EMAIL_SUCCESS',\n  RECLASSIFY_EMAIL_SUCCESS: 'RECLASSIFY_EMAIL_SUCCESS',\n\n  // Filters and search\n  SET_FILTERS: 'SET_FILTERS',\n  SET_SEARCH: 'SET_SEARCH',\n  APPLY_FILTERS: 'APPLY_FILTERS',\n  CLEAR_FILTERS: 'CLEAR_FILTERS',\n\n  // Selection\n  SELECT_EMAIL: 'SELECT_EMAIL',\n  SELECT_MULTIPLE_EMAILS: 'SELECT_MULTIPLE_EMAILS',\n  CLEAR_SELECTION: 'CLEAR_SELECTION',\n  SELECT_ALL: 'SELECT_ALL',\n\n  // Pagination\n  SET_PAGE: 'SET_PAGE',\n  UPDATE_PAGINATION: 'UPDATE_PAGINATION',\n\n  // Email accounts\n  FETCH_ACCOUNTS_SUCCESS: 'FETCH_ACCOUNTS_SUCCESS',\n  ADD_ACCOUNT_SUCCESS: 'ADD_ACCOUNT_SUCCESS',\n  REMOVE_ACCOUNT_SUCCESS: 'REMOVE_ACCOUNT_SUCCESS',\n  SYNC_ACCOUNT_SUCCESS: 'SYNC_ACCOUNT_SUCCESS',\n\n  // AI and stats\n  UPDATE_AI_STATS: 'UPDATE_AI_STATS',\n  RETRAIN_MODEL_SUCCESS: 'RETRAIN_MODEL_SUCCESS',\n\n  // Real-time updates\n  REAL_TIME_EMAIL_RECEIVED: 'REAL_TIME_EMAIL_RECEIVED',\n  REAL_TIME_EMAIL_CLASSIFIED: 'REAL_TIME_EMAIL_CLASSIFIED',\n  REAL_TIME_STATS_UPDATE: 'REAL_TIME_STATS_UPDATE',\n};\n\n// Helper functions\nconst categorizeEmails = (emails) => {\n  const categories = {\n    inbox: { count: 0, emails: [] },\n    spam: { count: 0, emails: [] },\n    promotions: { count: 0, emails: [] },\n    social: { count: 0, emails: [] },\n    updates: { count: 0, emails: [] },\n    forums: { count: 0, emails: [] },\n    important: { count: 0, emails: [] },\n  };\n\n  emails.forEach(email => {\n    const category = email.aiClassification?.category || 'inbox';\n    if (categories[category]) {\n      categories[category].emails.push(email);\n      categories[category].count++;\n    }\n  });\n\n  return categories;\n};\n\nconst applyFilters = (emails, filters) => {\n  let filtered = [...emails];\n\n  // Search filter\n  if (filters.search) {\n    const searchTerm = filters.search.toLowerCase();\n    filtered = filtered.filter(email =>\n      email.subject.toLowerCase().includes(searchTerm) ||\n      email.sender.toLowerCase().includes(searchTerm) ||\n      email.snippet.toLowerCase().includes(searchTerm)\n    );\n  }\n\n  // Category filter\n  if (filters.category && filters.category !== 'all') {\n    filtered = filtered.filter(email =>\n      email.aiClassification?.category === filters.category\n    );\n  }\n\n  // Read status filter\n  if (filters.isRead !== null) {\n    filtered = filtered.filter(email => email.isRead === filters.isRead);\n  }\n\n  // Date range filter\n  if (filters.dateRange) {\n    const { startDate, endDate } = filters.dateRange;\n    filtered = filtered.filter(email => {\n      const emailDate = new Date(email.date);\n      return emailDate >= startDate && emailDate <= endDate;\n    });\n  }\n\n  // Sort emails\n  filtered.sort((a, b) => {\n    const order = filters.sortOrder === 'asc' ? 1 : -1;\n\n    switch (filters.sortBy) {\n      case 'date':\n        return (new Date(a.date) - new Date(b.date)) * order;\n      case 'sender':\n        return a.sender.localeCompare(b.sender) * order;\n      case 'subject':\n        return a.subject.localeCompare(b.subject) * order;\n      case 'importance':\n        return (a.importance - b.importance) * order;\n      default:\n        return 0;\n    }\n  });\n\n  return filtered;\n};\n\nconst calculatePagination = (totalEmails, currentPage, emailsPerPage) => {\n  const totalPages = Math.ceil(totalEmails / emailsPerPage);\n  const validCurrentPage = Math.min(Math.max(1, currentPage), totalPages);\n\n  return {\n    currentPage: validCurrentPage,\n    totalPages,\n    totalEmails,\n    emailsPerPage,\n    startIndex: (validCurrentPage - 1) * emailsPerPage,\n    endIndex: validCurrentPage * emailsPerPage,\n  };\n};\n\n// Reducer function\nconst emailReducer = (state, action) => {\n  switch (action.type) {\n    case EMAIL_ACTIONS.SET_LOADING:\n      return { ...state, loading: action.payload };\n\n    case EMAIL_ACTIONS.SET_SYNCING:\n      return { ...state, syncing: action.payload };\n\n    case EMAIL_ACTIONS.SET_ERROR:\n      return { ...state, error: action.payload, loading: false, syncing: false };\n\n    case EMAIL_ACTIONS.CLEAR_ERROR:\n      return { ...state, error: null };\n\n    case EMAIL_ACTIONS.FETCH_EMAILS_SUCCESS:\n      const categorizedEmails = categorizeEmails(action.payload);\n      const filteredEmails = applyFilters(action.payload, state.filters);\n      const pagination = calculatePagination(\n        filteredEmails.length,\n        state.pagination.currentPage,\n        state.pagination.emailsPerPage\n      );\n\n      return {\n        ...state,\n        emails: action.payload,\n        filteredEmails,\n        categories: categorizedEmails,\n        pagination,\n        loading: false,\n        error: null,\n      };\n\n    case EMAIL_ACTIONS.FETCH_EMAIL_DETAIL_SUCCESS:\n      return {\n        ...state,\n        currentEmail: action.payload,\n        loading: false,\n      };\n\n    case EMAIL_ACTIONS.ADD_EMAIL:\n      const newEmails = [action.payload, ...state.emails];\n      const newCategories = categorizeEmails(newEmails);\n      const newFilteredEmails = applyFilters(newEmails, state.filters);\n\n      return {\n        ...state,\n        emails: newEmails,\n        filteredEmails: newFilteredEmails,\n        categories: newCategories,\n        pagination: calculatePagination(\n          newFilteredEmails.length,\n          state.pagination.currentPage,\n          state.pagination.emailsPerPage\n        ),\n      };\n\n    case EMAIL_ACTIONS.UPDATE_EMAIL:\n      const updatedEmails = state.emails.map(email =>\n        email.id === action.payload.id ? { ...email, ...action.payload } : email\n      );\n      const updatedCategories = categorizeEmails(updatedEmails);\n      const updatedFilteredEmails = applyFilters(updatedEmails, state.filters);\n\n      return {\n        ...state,\n        emails: updatedEmails,\n        filteredEmails: updatedFilteredEmails,\n        categories: updatedCategories,\n        currentEmail: state.currentEmail?.id === action.payload.id\n          ? { ...state.currentEmail, ...action.payload }\n          : state.currentEmail,\n      };\n\n    case EMAIL_ACTIONS.DELETE_EMAIL:\n      const remainingEmails = state.emails.filter(email => email.id !== action.payload);\n      const remainingCategories = categorizeEmails(remainingEmails);\n      const remainingFilteredEmails = applyFilters(remainingEmails, state.filters);\n\n      return {\n        ...state,\n        emails: remainingEmails,\n        filteredEmails: remainingFilteredEmails,\n        categories: remainingCategories,\n        selectedEmails: state.selectedEmails.filter(id => id !== action.payload),\n        pagination: calculatePagination(\n          remainingFilteredEmails.length,\n          state.pagination.currentPage,\n          state.pagination.emailsPerPage\n        ),\n      };\n\n    case EMAIL_ACTIONS.BULK_UPDATE_EMAILS:\n      const bulkUpdatedEmails = state.emails.map(email =>\n        action.payload.ids.includes(email.id)\n          ? { ...email, ...action.payload.updates }\n          : email\n      );\n      const bulkUpdatedCategories = categorizeEmails(bulkUpdatedEmails);\n      const bulkUpdatedFilteredEmails = applyFilters(bulkUpdatedEmails, state.filters);\n\n      return {\n        ...state,\n        emails: bulkUpdatedEmails,\n        filteredEmails: bulkUpdatedFilteredEmails,\n        categories: bulkUpdatedCategories,\n      };\n\n    case EMAIL_ACTIONS.SET_FILTERS:\n      const newFilters = { ...state.filters, ...action.payload };\n      const newlyFilteredEmails = applyFilters(state.emails, newFilters);\n\n      return {\n        ...state,\n        filters: newFilters,\n        filteredEmails: newlyFilteredEmails,\n        pagination: calculatePagination(\n          newlyFilteredEmails.length,\n          1, // Reset to first page when filters change\n          state.pagination.emailsPerPage\n        ),\n      };\n\n    case EMAIL_ACTIONS.SET_SEARCH:\n      const searchFilters = { ...state.filters, search: action.payload };\n      const searchFilteredEmails = applyFilters(state.emails, searchFilters);\n\n      return {\n        ...state,\n        filters: searchFilters,\n        filteredEmails: searchFilteredEmails,\n        pagination: calculatePagination(\n          searchFilteredEmails.length,\n          1,\n          state.pagination.emailsPerPage\n        ),\n      };\n\n    case EMAIL_ACTIONS.CLEAR_FILTERS:\n      const clearedFilters = {\n        search: '',\n        category: 'all',\n        dateRange: null,\n        isRead: null,\n        sortBy: 'date',\n        sortOrder: 'desc',\n      };\n      const clearedFilteredEmails = applyFilters(state.emails, clearedFilters);\n\n      return {\n        ...state,\n        filters: clearedFilters,\n        filteredEmails: clearedFilteredEmails,\n        pagination: calculatePagination(\n          clearedFilteredEmails.length,\n          1,\n          state.pagination.emailsPerPage\n        ),\n      };\n\n    case EMAIL_ACTIONS.SELECT_EMAIL:\n      const isSelected = state.selectedEmails.includes(action.payload);\n      const newSelectedEmails = isSelected\n        ? state.selectedEmails.filter(id => id !== action.payload)\n        : [...state.selectedEmails, action.payload];\n\n      return {\n        ...state,\n        selectedEmails: newSelectedEmails,\n      };\n\n    case EMAIL_ACTIONS.SELECT_MULTIPLE_EMAILS:\n      return {\n        ...state,\n        selectedEmails: [...new Set([...state.selectedEmails, ...action.payload])],\n      };\n\n    case EMAIL_ACTIONS.CLEAR_SELECTION:\n      return {\n        ...state,\n        selectedEmails: [],\n      };\n\n    case EMAIL_ACTIONS.SELECT_ALL:\n      const currentPageEmails = state.filteredEmails.slice(\n        state.pagination.startIndex,\n        state.pagination.endIndex\n      );\n      const allCurrentPageIds = currentPageEmails.map(email => email.id);\n\n      return {\n        ...state,\n        selectedEmails: action.payload\n          ? [...new Set([...state.selectedEmails, ...allCurrentPageIds])]\n          : state.selectedEmails.filter(id => !allCurrentPageIds.includes(id)),\n      };\n\n    case EMAIL_ACTIONS.SET_PAGE:\n      return {\n        ...state,\n        pagination: {\n          ...state.pagination,\n          currentPage: action.payload,\n        },\n      };\n\n    case EMAIL_ACTIONS.FETCH_ACCOUNTS_SUCCESS:\n      return {\n        ...state,\n        emailAccounts: action.payload,\n        loading: false,\n      };\n\n    case EMAIL_ACTIONS.ADD_ACCOUNT_SUCCESS:\n      return {\n        ...state,\n        emailAccounts: [...state.emailAccounts, action.payload],\n        loading: false,\n      };\n\n    case EMAIL_ACTIONS.REMOVE_ACCOUNT_SUCCESS:\n      return {\n        ...state,\n        emailAccounts: state.emailAccounts.filter(\n          account => account.id !== action.payload\n        ),\n      };\n\n    case EMAIL_ACTIONS.UPDATE_AI_STATS:\n      return {\n        ...state,\n        aiStats: { ...state.aiStats, ...action.payload },\n      };\n\n    case EMAIL_ACTIONS.REAL_TIME_EMAIL_RECEIVED:\n      return {\n        ...state,\n        emails: [action.payload, ...state.emails],\n        categories: categorizeEmails([action.payload, ...state.emails]),\n      };\n\n    case EMAIL_ACTIONS.REAL_TIME_EMAIL_CLASSIFIED:\n      const rtUpdatedEmails = state.emails.map(email =>\n        email.id === action.payload.id\n          ? { ...email, aiClassification: action.payload.classification }\n          : email\n      );\n\n      return {\n        ...state,\n        emails: rtUpdatedEmails,\n        categories: categorizeEmails(rtUpdatedEmails),\n      };\n\n    case EMAIL_ACTIONS.REAL_TIME_STATS_UPDATE:\n      return {\n        ...state,\n        aiStats: { ...state.aiStats, ...action.payload },\n      };\n\n    default:\n      return state;\n  }\n};\n\n// API base URL\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\n\n// Create axios instance\nconst api = axios.create({\n  baseURL: API_URL,\n  timeout: 30000,\n});\n\n// Add token to requests\napi.interceptors.request.use((config) => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\n// Email Provider Component\nexport const EmailProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(emailReducer, initialState);\n\n  // Socket connection for real-time updates\n  useEffect(() => {\n    const token = localStorage.getItem('token');\n    if (!token) return;\n\n    const socket = io(API_URL.replace('/api', ''), {\n      auth: { token }\n    });\n\n    socket.on('emailReceived', (email) => {\n      dispatch({ type: EMAIL_ACTIONS.REAL_TIME_EMAIL_RECEIVED, payload: email });\n      toast.success(`New email from ${email.sender}`);\n    });\n\n    socket.on('emailClassified', (data) => {\n      dispatch({ type: EMAIL_ACTIONS.REAL_TIME_EMAIL_CLASSIFIED, payload: data });\n    });\n\n    socket.on('statsUpdated', (stats) => {\n      dispatch({ type: EMAIL_ACTIONS.REAL_TIME_STATS_UPDATE, payload: stats });\n    });\n\n    return () => socket.disconnect();\n  }, []);\n\n  // Fetch emails\n  const fetchEmails = async (options = {}) => {\n    dispatch({ type: EMAIL_ACTIONS.SET_LOADING, payload: true });\n\n    try {\n      const response = await api.get('/emails', { params: options });\n      dispatch({\n        type: EMAIL_ACTIONS.FETCH_EMAILS_SUCCESS,\n        payload: response.data.emails,\n      });\n      return { success: true, data: response.data };\n    } catch (error) {\n      const errorMessage = error.response?.data?.message || 'Failed to fetch emails';\n      dispatch({ type: EMAIL_ACTIONS.SET_ERROR, payload: errorMessage });\n      toast.error(errorMessage);\n      return { success: false, error: errorMessage };\n    }\n  };\n\n  // Fetch single email\n  const fetchEmail = async (emailId) => {\n    dispatch({ type: EMAIL_ACTIONS.SET_LOADING, payload: true });\n\n    try {\n      const response = await api.get(`/emails/${emailId}`);\n      dispatch({\n        type: EMAIL_ACTIONS.FETCH_EMAIL_DETAIL_SUCCESS,\n        payload: response.data.email,\n      });\n      return { success: true, data: response.data.email };\n    } catch (error) {\n      const errorMessage = error.response?.data?.message || 'Failed to fetch email';\n      dispatch({ type: EMAIL_ACTIONS.SET_ERROR, payload: errorMessage });\n      return { success: false, error: errorMessage };\n    }\n  };\n\n  // Classify email\n  const classifyEmail = async (emailId, category, isUserFeedback = false) => {\n    try {\n      const response = await api.post(`/emails/${emailId}/classify`, {\n        category,\n        isUserFeedback,\n      });\n\n      dispatch({\n        type: EMAIL_ACTIONS.UPDATE_EMAIL,\n        payload: {\n          id: emailId,\n          aiClassification: response.data.classification,\n        },\n      });\n\n      toast.success(`Email classified as ${category}`);\n      return { success: true, data: response.data };\n    } catch (error) {\n      const errorMessage = error.response?.data?.message || 'Classification failed';\n      toast.error(errorMessage);\n      return { success: false, error: errorMessage };\n    }\n  };\n\n  // Bulk operations\n  const bulkClassify = async (emailIds, category) => {\n    try {\n      const response = await api.post('/emails/bulk-classify', {\n        emailIds,\n        category,\n      });\n\n      dispatch({\n        type: EMAIL_ACTIONS.BULK_UPDATE_EMAILS,\n        payload: {\n          ids: emailIds,\n          updates: { aiClassification: { category } },\n        },\n      });\n\n      toast.success(`${emailIds.length} emails classified as ${category}`);\n      return { success: true, data: response.data };\n    } catch (error) {\n      const errorMessage = error.response?.data?.message || 'Bulk classification failed';\n      toast.error(errorMessage);\n      return { success: false, error: errorMessage };\n    }\n  };\n\n  // Mark as read/unread\n  const markAsRead = async (emailIds, isRead = true) => {\n    try {\n      const response = await api.put('/emails/mark-read', {\n        emailIds: Array.isArray(emailIds) ? emailIds : [emailIds],\n        isRead,\n      });\n\n      dispatch({\n        type: EMAIL_ACTIONS.BULK_UPDATE_EMAILS,\n        payload: {\n          ids: Array.isArray(emailIds) ? emailIds : [emailIds],\n          updates: { isRead },\n        },\n      });\n\n      return { success: true, data: response.data };\n    } catch (error) {\n      const errorMessage = error.response?.data?.message || 'Failed to update read status';\n      toast.error(errorMessage);\n      return { success: false, error: errorMessage };\n    }\n  };\n\n  // Delete emails\n  const deleteEmails = async (emailIds) => {\n    try {\n      await api.delete('/emails', {\n        data: { emailIds: Array.isArray(emailIds) ? emailIds : [emailIds] }\n      });\n\n      const idsToDelete = Array.isArray(emailIds) ? emailIds : [emailIds];\n      idsToDelete.forEach(id => {\n        dispatch({ type: EMAIL_ACTIONS.DELETE_EMAIL, payload: id });\n      });\n\n      toast.success(`${idsToDelete.length} email(s) deleted`);\n      return { success: true };\n    } catch (error) {\n      const errorMessage = error.response?.data?.message || 'Failed to delete emails';\n      toast.error(errorMessage);\n      return { success: false, error: errorMessage };\n    }\n  };\n\n  // Sync email accounts\n  const syncEmailAccounts = async (accountId = null) => {\n    dispatch({ type: EMAIL_ACTIONS.SET_SYNCING, payload: true });\n\n    try {\n      const url = accountId ? `/sync/${accountId}` : '/sync';\n      const response = await api.post(url);\n\n      dispatch({ type: EMAIL_ACTIONS.SET_SYNCING, payload: false });\n      toast.success('Email sync completed');\n\n      // Refresh emails after sync\n      await fetchEmails();\n\n      return { success: true, data: response.data };\n    } catch (error) {\n      dispatch({ type: EMAIL_ACTIONS.SET_SYNCING, payload: false });\n      const errorMessage = error.response?.data?.message || 'Sync failed';\n      toast.error(errorMessage);\n      return { success: false, error: errorMessage };\n    }\n  };\n\n  // Add email account\n  const addEmailAccount = async (accountData) => {\n    dispatch({ type: EMAIL_ACTIONS.SET_LOADING, payload: true });\n\n    try {\n      const response = await api.post('/accounts', accountData);\n\n      dispatch({\n        type: EMAIL_ACTIONS.ADD_ACCOUNT_SUCCESS,\n        payload: response.data.account,\n      });\n\n      toast.success('Email account added successfully');\n      return { success: true, data: response.data.account };\n    } catch (error) {\n      dispatch({ type: EMAIL_ACTIONS.SET_LOADING, payload: false });\n      const errorMessage = error.response?.data?.message || 'Failed to add email account';\n      toast.error(errorMessage);\n      return { success: false, error: errorMessage };\n    }\n  };\n\n  // Remove email account\n  const removeEmailAccount = async (accountId) => {\n    try {\n      await api.delete(`/accounts/${accountId}`);\n\n      dispatch({\n        type: EMAIL_ACTIONS.REMOVE_ACCOUNT_SUCCESS,\n        payload: accountId,\n      });\n\n      toast.success('Email account removed');\n      return { success: true };\n    } catch (error) {\n      const errorMessage = error.response?.data?.message || 'Failed to remove email account';\n      toast.error(errorMessage);\n      return { success: false, error: errorMessage };\n    }\n  };\n\n  // Fetch email accounts\n  const fetchEmailAccounts = async () => {\n    dispatch({ type: EMAIL_ACTIONS.SET_LOADING, payload: true });\n\n    try {\n      const response = await api.get('/accounts');\n      dispatch({\n        type: EMAIL_ACTIONS.FETCH_ACCOUNTS_SUCCESS,\n        payload: response.data.accounts,\n      });\n      return { success: true, data: response.data.accounts };\n    } catch (error) {\n      dispatch({ type: EMAIL_ACTIONS.SET_LOADING, payload: false });\n      const errorMessage = error.response?.data?.message || 'Failed to fetch email accounts';\n      dispatch({ type: EMAIL_ACTIONS.SET_ERROR, payload: errorMessage });\n      return { success: false, error: errorMessage };\n    }\n  };\n\n  // Retrain AI model\n  const retrainModel = async () => {\n    dispatch({ type: EMAIL_ACTIONS.SET_LOADING, payload: true });\n\n    try {\n      const response = await api.post('/ai/retrain');\n\n      dispatch({\n        type: EMAIL_ACTIONS.UPDATE_AI_STATS,\n        payload: response.data.stats,\n      });\n\n      dispatch({ type: EMAIL_ACTIONS.SET_LOADING, payload: false });\n      toast.success('AI model retrained successfully');\n      return { success: true, data: response.data };\n    } catch (error) {\n      dispatch({ type: EMAIL_ACTIONS.SET_LOADING, payload: false });\n      const errorMessage = error.response?.data?.message || 'Failed to retrain model';\n      toast.error(errorMessage);\n      return { success: false, error: errorMessage };\n    }\n  };\n\n  // Get AI statistics\n  const fetchAIStats = async () => {\n    try {\n      const response = await api.get('/ai/stats');\n      dispatch({\n        type: EMAIL_ACTIONS.UPDATE_AI_STATS,\n        payload: response.data.stats,\n      });\n      return { success: true, data: response.data.stats };\n    } catch (error) {\n      const errorMessage = error.response?.data?.message || 'Failed to fetch AI stats';\n      return { success: false, error: errorMessage };\n    }\n  };\n\n  // Filter and search functions\n  const setFilters = (filters) => {\n    dispatch({ type: EMAIL_ACTIONS.SET_FILTERS, payload: filters });\n  };\n\n  const setSearch = (searchTerm) => {\n    dispatch({ type: EMAIL_ACTIONS.SET_SEARCH, payload: searchTerm });\n  };\n\n  const clearFilters = () => {\n    dispatch({ type: EMAIL_ACTIONS.CLEAR_FILTERS });\n  };\n\n  // Selection functions\n  const selectEmail = (emailId) => {\n    dispatch({ type: EMAIL_ACTIONS.SELECT_EMAIL, payload: emailId });\n  };\n\n  const selectMultipleEmails = (emailIds) => {\n    dispatch({ type: EMAIL_ACTIONS.SELECT_MULTIPLE_EMAILS, payload: emailIds });\n  };\n\n  const clearSelection = () => {\n    dispatch({ type: EMAIL_ACTIONS.CLEAR_SELECTION });\n  };\n\n  const selectAllOnPage = (selectAll) => {\n    dispatch({ type: EMAIL_ACTIONS.SELECT_ALL, payload: selectAll });\n  };\n\n  // Pagination functions\n  const setPage = (page) => {\n    dispatch({ type: EMAIL_ACTIONS.SET_PAGE, payload: page });\n  };\n\n  // Clear errors\n  const clearError = () => {\n    dispatch({ type: EMAIL_ACTIONS.CLEAR_ERROR });\n  };\n\n  // Context value\n  const value = {\n    ...state,\n    fetchEmails,\n    fetchEmail,\n    classifyEmail,\n    bulkClassify,\n    markAsRead,\n    deleteEmails,\n    syncEmailAccounts,\n    addEmailAccount,\n    removeEmailAccount,\n    fetchEmailAccounts,\n    retrainModel,\n    fetchAIStats,\n    setFilters,\n    setSearch,\n    clearFilters,\n    selectEmail,\n    selectMultipleEmails,\n    clearSelection,\n    selectAllOnPage,\n    setPage,\n    clearError,\n  };\n\n  return (\n    <EmailContext.Provider value={value}>\n      {children}\n    </EmailContext.Provider>\n  );\n};\n\n// Custom hook to use email context\nexport const useEmail = () => {\n  const context = useContext(EmailContext);\n\n  if (!context) {\n    throw new Error('useEmail must be used within an EmailProvider');\n  }\n\n  return context;\n};\n\nexport default EmailContext;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}