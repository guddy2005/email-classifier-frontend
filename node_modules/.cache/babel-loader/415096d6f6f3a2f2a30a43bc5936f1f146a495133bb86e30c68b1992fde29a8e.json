{"ast":null,"code":"var _jsxFileName = \"/home/guddy/code/project/client/src/contexts/SettingsContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$(),\n  _s4 = $RefreshSig$(),\n  _s5 = $RefreshSig$();\nimport React, { createContext, useContext, useReducer, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { toast } from \"react-hot-toast\";\n\n// Create context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SettingsContext = /*#__PURE__*/createContext();\n\n// Initial state\nconst initialState = {\n  // UI preferences\n  theme: localStorage.getItem(\"theme\") || \"light\",\n  language: localStorage.getItem(\"language\") || \"en\",\n  timezone: Intl.DateTimeFormat().resolvedOptions().timeZone,\n  density: localStorage.getItem(\"density\") || \"comfortable\",\n  // compact, comfortable, spacious\n  sidebarCollapsed: JSON.parse(localStorage.getItem(\"sidebarCollapsed\") || \"false\"),\n  // Email preferences\n  emailsPerPage: parseInt(localStorage.getItem(\"emailsPerPage\") || \"20\"),\n  defaultSortBy: localStorage.getItem(\"defaultSortBy\") || \"date\",\n  defaultSortOrder: localStorage.getItem(\"defaultSortOrder\") || \"desc\",\n  autoRefresh: JSON.parse(localStorage.getItem(\"autoRefresh\") || \"true\"),\n  refreshInterval: parseInt(localStorage.getItem(\"refreshInterval\") || \"300\"),\n  // seconds\n  markAsReadOnView: JSON.parse(localStorage.getItem(\"markAsReadOnView\") || \"true\"),\n  // Notification preferences\n  notifications: {\n    desktop: JSON.parse(localStorage.getItem(\"desktopNotifications\") || \"true\"),\n    sound: JSON.parse(localStorage.getItem(\"soundNotifications\") || \"true\"),\n    email: JSON.parse(localStorage.getItem(\"emailNotifications\") || \"true\"),\n    newEmails: JSON.parse(localStorage.getItem(\"newEmailNotifications\") || \"true\"),\n    importantEmails: JSON.parse(localStorage.getItem(\"importantEmailNotifications\") || \"true\"),\n    weeklyDigest: JSON.parse(localStorage.getItem(\"weeklyDigestNotifications\") || \"true\")\n  },\n  // AI/ML preferences\n  aiSettings: {\n    autoClassify: JSON.parse(localStorage.getItem(\"autoClassify\") || \"true\"),\n    confidenceThreshold: parseFloat(localStorage.getItem(\"confidenceThreshold\") || \"0.8\"),\n    enableLearning: JSON.parse(localStorage.getItem(\"enableLearning\") || \"true\"),\n    retrainFrequency: localStorage.getItem(\"retrainFrequency\") || \"weekly\",\n    // daily, weekly, monthly\n    customRules: JSON.parse(localStorage.getItem(\"customRules\") || \"[]\")\n  },\n  // Security preferences\n  security: {\n    twoFactorEnabled: false,\n    sessionTimeout: parseInt(localStorage.getItem(\"sessionTimeout\") || \"480\"),\n    // minutes\n    loginNotifications: JSON.parse(localStorage.getItem(\"loginNotifications\") || \"true\"),\n    dataRetention: parseInt(localStorage.getItem(\"dataRetention\") || \"365\") // days\n  },\n  // Data visualization preferences\n  charts: {\n    defaultTimeRange: localStorage.getItem(\"chartTimeRange\") || \"30d\",\n    showAnimations: JSON.parse(localStorage.getItem(\"chartAnimations\") || \"true\"),\n    colorScheme: localStorage.getItem(\"chartColorScheme\") || \"default\"\n  },\n  // Advanced preferences\n  advanced: {\n    debugMode: JSON.parse(localStorage.getItem(\"debugMode\") || \"false\"),\n    betaFeatures: JSON.parse(localStorage.getItem(\"betaFeatures\") || \"false\"),\n    telemetry: JSON.parse(localStorage.getItem(\"telemetry\") || \"true\")\n  },\n  loading: false,\n  error: null,\n  lastSaved: null\n};\n\n// Action types\nconst SETTINGS_ACTIONS = {\n  SET_LOADING: \"SET_LOADING\",\n  SET_ERROR: \"SET_ERROR\",\n  CLEAR_ERROR: \"CLEAR_ERROR\",\n  // Theme and UI\n  SET_THEME: \"SET_THEME\",\n  SET_LANGUAGE: \"SET_LANGUAGE\",\n  SET_DENSITY: \"SET_DENSITY\",\n  TOGGLE_SIDEBAR: \"TOGGLE_SIDEBAR\",\n  // Email preferences\n  SET_EMAILS_PER_PAGE: \"SET_EMAILS_PER_PAGE\",\n  SET_DEFAULT_SORT: \"SET_DEFAULT_SORT\",\n  SET_AUTO_REFRESH: \"SET_AUTO_REFRESH\",\n  SET_REFRESH_INTERVAL: \"SET_REFRESH_INTERVAL\",\n  SET_MARK_AS_READ_ON_VIEW: \"SET_MARK_AS_READ_ON_VIEW\",\n  // Notifications\n  SET_NOTIFICATION_PREFERENCE: \"SET_NOTIFICATION_PREFERENCE\",\n  SET_NOTIFICATIONS: \"SET_NOTIFICATIONS\",\n  // AI settings\n  SET_AI_SETTING: \"SET_AI_SETTING\",\n  SET_AI_SETTINGS: \"SET_AI_SETTINGS\",\n  ADD_CUSTOM_RULE: \"ADD_CUSTOM_RULE\",\n  UPDATE_CUSTOM_RULE: \"UPDATE_CUSTOM_RULE\",\n  REMOVE_CUSTOM_RULE: \"REMOVE_CUSTOM_RULE\",\n  // Security\n  SET_SECURITY_SETTING: \"SET_SECURITY_SETTING\",\n  SET_SECURITY_SETTINGS: \"SET_SECURITY_SETTINGS\",\n  // Charts\n  SET_CHART_SETTING: \"SET_CHART_SETTING\",\n  SET_CHART_SETTINGS: \"SET_CHART_SETTINGS\",\n  // Advanced\n  SET_ADVANCED_SETTING: \"SET_ADVANCED_SETTING\",\n  // Bulk operations\n  LOAD_SETTINGS_SUCCESS: \"LOAD_SETTINGS_SUCCESS\",\n  SAVE_SETTINGS_SUCCESS: \"SAVE_SETTINGS_SUCCESS\",\n  RESET_SETTINGS: \"RESET_SETTINGS\"\n};\n\n// Helper functions\nconst saveToLocalStorage = (key, value) => {\n  try {\n    localStorage.setItem(key, typeof value === \"string\" ? value : JSON.stringify(value));\n  } catch (error) {\n    console.error(\"Failed to save to localStorage:\", error);\n  }\n};\n\n// Reducer function\nconst settingsReducer = (state, action) => {\n  let newState;\n  switch (action.type) {\n    case SETTINGS_ACTIONS.SET_LOADING:\n      return {\n        ...state,\n        loading: action.payload\n      };\n    case SETTINGS_ACTIONS.SET_ERROR:\n      return {\n        ...state,\n        error: action.payload,\n        loading: false\n      };\n    case SETTINGS_ACTIONS.CLEAR_ERROR:\n      return {\n        ...state,\n        error: null\n      };\n    case SETTINGS_ACTIONS.SET_THEME:\n      saveToLocalStorage(\"theme\", action.payload);\n      return {\n        ...state,\n        theme: action.payload\n      };\n    case SETTINGS_ACTIONS.SET_LANGUAGE:\n      saveToLocalStorage(\"language\", action.payload);\n      return {\n        ...state,\n        language: action.payload\n      };\n    case SETTINGS_ACTIONS.SET_DENSITY:\n      saveToLocalStorage(\"density\", action.payload);\n      return {\n        ...state,\n        density: action.payload\n      };\n    case SETTINGS_ACTIONS.TOGGLE_SIDEBAR:\n      const collapsed = !state.sidebarCollapsed;\n      saveToLocalStorage(\"sidebarCollapsed\", collapsed);\n      return {\n        ...state,\n        sidebarCollapsed: collapsed\n      };\n    case SETTINGS_ACTIONS.SET_EMAILS_PER_PAGE:\n      saveToLocalStorage(\"emailsPerPage\", action.payload);\n      return {\n        ...state,\n        emailsPerPage: action.payload\n      };\n    case SETTINGS_ACTIONS.SET_DEFAULT_SORT:\n      saveToLocalStorage(\"defaultSortBy\", action.payload.sortBy);\n      saveToLocalStorage(\"defaultSortOrder\", action.payload.sortOrder);\n      return {\n        ...state,\n        defaultSortBy: action.payload.sortBy,\n        defaultSortOrder: action.payload.sortOrder\n      };\n    case SETTINGS_ACTIONS.SET_AUTO_REFRESH:\n      saveToLocalStorage(\"autoRefresh\", action.payload);\n      return {\n        ...state,\n        autoRefresh: action.payload\n      };\n    case SETTINGS_ACTIONS.SET_REFRESH_INTERVAL:\n      saveToLocalStorage(\"refreshInterval\", action.payload);\n      return {\n        ...state,\n        refreshInterval: action.payload\n      };\n    case SETTINGS_ACTIONS.SET_MARK_AS_READ_ON_VIEW:\n      saveToLocalStorage(\"markAsReadOnView\", action.payload);\n      return {\n        ...state,\n        markAsReadOnView: action.payload\n      };\n    case SETTINGS_ACTIONS.SET_NOTIFICATION_PREFERENCE:\n      newState = {\n        ...state,\n        notifications: {\n          ...state.notifications,\n          [action.payload.key]: action.payload.value\n        }\n      };\n      saveToLocalStorage(`${action.payload.key}Notifications`, action.payload.value);\n      return newState;\n    case SETTINGS_ACTIONS.SET_NOTIFICATIONS:\n      newState = {\n        ...state,\n        notifications: {\n          ...state.notifications,\n          ...action.payload\n        }\n      };\n      // Save each notification preference\n      Object.entries(action.payload).forEach(([key, value]) => {\n        saveToLocalStorage(`${key}Notifications`, value);\n      });\n      return newState;\n    case SETTINGS_ACTIONS.SET_AI_SETTING:\n      newState = {\n        ...state,\n        aiSettings: {\n          ...state.aiSettings,\n          [action.payload.key]: action.payload.value\n        }\n      };\n      saveToLocalStorage(action.payload.key, action.payload.value);\n      return newState;\n    case SETTINGS_ACTIONS.SET_AI_SETTINGS:\n      newState = {\n        ...state,\n        aiSettings: {\n          ...state.aiSettings,\n          ...action.payload\n        }\n      };\n      // Save each AI setting\n      Object.entries(action.payload).forEach(([key, value]) => {\n        saveToLocalStorage(key, value);\n      });\n      return newState;\n    case SETTINGS_ACTIONS.ADD_CUSTOM_RULE:\n      newState = {\n        ...state,\n        aiSettings: {\n          ...state.aiSettings,\n          customRules: [...state.aiSettings.customRules, action.payload]\n        }\n      };\n      saveToLocalStorage(\"customRules\", newState.aiSettings.customRules);\n      return newState;\n    case SETTINGS_ACTIONS.UPDATE_CUSTOM_RULE:\n      newState = {\n        ...state,\n        aiSettings: {\n          ...state.aiSettings,\n          customRules: state.aiSettings.customRules.map(rule => rule.id === action.payload.id ? {\n            ...rule,\n            ...action.payload.updates\n          } : rule)\n        }\n      };\n      saveToLocalStorage(\"customRules\", newState.aiSettings.customRules);\n      return newState;\n    case SETTINGS_ACTIONS.REMOVE_CUSTOM_RULE:\n      newState = {\n        ...state,\n        aiSettings: {\n          ...state.aiSettings,\n          customRules: state.aiSettings.customRules.filter(rule => rule.id !== action.payload)\n        }\n      };\n      saveToLocalStorage(\"customRules\", newState.aiSettings.customRules);\n      return newState;\n    case SETTINGS_ACTIONS.SET_SECURITY_SETTING:\n      newState = {\n        ...state,\n        security: {\n          ...state.security,\n          [action.payload.key]: action.payload.value\n        }\n      };\n      if (action.payload.key !== \"twoFactorEnabled\") {\n        saveToLocalStorage(action.payload.key, action.payload.value);\n      }\n      return newState;\n    case SETTINGS_ACTIONS.SET_SECURITY_SETTINGS:\n      newState = {\n        ...state,\n        security: {\n          ...state.security,\n          ...action.payload\n        }\n      };\n      // Save security settings (excluding sensitive ones)\n      Object.entries(action.payload).forEach(([key, value]) => {\n        if (key !== \"twoFactorEnabled\") {\n          saveToLocalStorage(key, value);\n        }\n      });\n      return newState;\n    case SETTINGS_ACTIONS.SET_CHART_SETTING:\n      newState = {\n        ...state,\n        charts: {\n          ...state.charts,\n          [action.payload.key]: action.payload.value\n        }\n      };\n      saveToLocalStorage(`chart${action.payload.key.charAt(0).toUpperCase() + action.payload.key.slice(1)}`, action.payload.value);\n      return newState;\n    case SETTINGS_ACTIONS.SET_CHART_SETTINGS:\n      newState = {\n        ...state,\n        charts: {\n          ...state.charts,\n          ...action.payload\n        }\n      };\n      Object.entries(action.payload).forEach(([key, value]) => {\n        saveToLocalStorage(`chart${key.charAt(0).toUpperCase() + key.slice(1)}`, value);\n      });\n      return newState;\n    case SETTINGS_ACTIONS.SET_ADVANCED_SETTING:\n      newState = {\n        ...state,\n        advanced: {\n          ...state.advanced,\n          [action.payload.key]: action.payload.value\n        }\n      };\n      saveToLocalStorage(action.payload.key, action.payload.value);\n      return newState;\n    case SETTINGS_ACTIONS.LOAD_SETTINGS_SUCCESS:\n      return {\n        ...state,\n        ...action.payload,\n        loading: false,\n        lastSaved: new Date().toISOString()\n      };\n    case SETTINGS_ACTIONS.SAVE_SETTINGS_SUCCESS:\n      return {\n        ...state,\n        loading: false,\n        lastSaved: new Date().toISOString()\n      };\n    case SETTINGS_ACTIONS.RESET_SETTINGS:\n      // Clear localStorage\n      const keysToRemove = [\"theme\", \"language\", \"density\", \"sidebarCollapsed\", \"emailsPerPage\", \"defaultSortBy\", \"defaultSortOrder\", \"autoRefresh\", \"refreshInterval\", \"markAsReadOnView\", \"desktopNotifications\", \"soundNotifications\", \"emailNotifications\", \"newEmailNotifications\", \"importantEmailNotifications\", \"weeklyDigestNotifications\", \"autoClassify\", \"confidenceThreshold\", \"enableLearning\", \"retrainFrequency\", \"customRules\", \"sessionTimeout\", \"loginNotifications\", \"dataRetention\", \"chartTimeRange\", \"chartAnimations\", \"chartColorScheme\", \"debugMode\", \"betaFeatures\", \"telemetry\"];\n      keysToRemove.forEach(key => {\n        localStorage.removeItem(key);\n      });\n      return {\n        ...initialState,\n        loading: false,\n        error: null\n      };\n    default:\n      return state;\n  }\n};\n\n// API base URL\nconst API_URL = \"/api\";\n\n// Create axios instance\nconst api = axios.create({\n  baseURL: API_URL,\n  timeout: 10000\n});\n\n// Add token to requests\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem(\"token\");\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\n// Settings Provider Component\nexport const SettingsProvider = ({\n  children\n}) => {\n  _s();\n  const [state, dispatch] = useReducer(settingsReducer, initialState);\n\n  // Load settings from server on mount\n  useEffect(() => {\n    loadSettings();\n  }, []);\n\n  // Apply theme changes\n  useEffect(() => {\n    document.documentElement.setAttribute(\"data-theme\", state.theme);\n    if (state.theme === \"dark\") {\n      document.documentElement.classList.add(\"dark\");\n    } else {\n      document.documentElement.classList.remove(\"dark\");\n    }\n  }, [state.theme]);\n\n  // Apply density changes\n  useEffect(() => {\n    document.documentElement.setAttribute(\"data-density\", state.density);\n  }, [state.density]);\n\n  // Request notification permissions\n  useEffect(() => {\n    if (state.notifications.desktop && \"Notification\" in window) {\n      Notification.requestPermission();\n    }\n  }, [state.notifications.desktop]);\n\n  // Load settings from server\n  const loadSettings = async () => {\n    dispatch({\n      type: SETTINGS_ACTIONS.SET_LOADING,\n      payload: true\n    });\n    try {\n      const response = await api.get(\"/settings\");\n      dispatch({\n        type: SETTINGS_ACTIONS.LOAD_SETTINGS_SUCCESS,\n        payload: response.data.settings\n      });\n      return {\n        success: true,\n        data: response.data.settings\n      };\n    } catch (error) {\n      // If server settings fail to load, use local settings\n      dispatch({\n        type: SETTINGS_ACTIONS.SET_LOADING,\n        payload: false\n      });\n      console.warn(\"Failed to load server settings, using local settings\");\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  };\n\n  // Save settings to server\n  const saveSettings = async (settingsToSave = null) => {\n    dispatch({\n      type: SETTINGS_ACTIONS.SET_LOADING,\n      payload: true\n    });\n    try {\n      const settings = settingsToSave || {\n        theme: state.theme,\n        language: state.language,\n        timezone: state.timezone,\n        density: state.density,\n        sidebarCollapsed: state.sidebarCollapsed,\n        emailsPerPage: state.emailsPerPage,\n        defaultSortBy: state.defaultSortBy,\n        defaultSortOrder: state.defaultSortOrder,\n        autoRefresh: state.autoRefresh,\n        refreshInterval: state.refreshInterval,\n        markAsReadOnView: state.markAsReadOnView,\n        notifications: state.notifications,\n        aiSettings: state.aiSettings,\n        security: state.security,\n        charts: state.charts,\n        advanced: state.advanced\n      };\n      await api.put(\"/settings\", {\n        settings\n      });\n      dispatch({\n        type: SETTINGS_ACTIONS.SAVE_SETTINGS_SUCCESS\n      });\n      toast.success(\"Settings saved successfully\");\n      return {\n        success: true\n      };\n    } catch (error) {\n      var _error$response, _error$response$data;\n      dispatch({\n        type: SETTINGS_ACTIONS.SET_ERROR,\n        payload: ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || \"Failed to save settings\"\n      });\n      toast.error(\"Failed to save settings\");\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  };\n\n  // Theme functions\n  const setTheme = theme => {\n    dispatch({\n      type: SETTINGS_ACTIONS.SET_THEME,\n      payload: theme\n    });\n  };\n  const toggleTheme = () => {\n    const newTheme = state.theme === \"light\" ? \"dark\" : \"light\";\n    setTheme(newTheme);\n  };\n\n  // UI functions\n  const setLanguage = language => {\n    dispatch({\n      type: SETTINGS_ACTIONS.SET_LANGUAGE,\n      payload: language\n    });\n  };\n  const setDensity = density => {\n    dispatch({\n      type: SETTINGS_ACTIONS.SET_DENSITY,\n      payload: density\n    });\n  };\n  const toggleSidebar = () => {\n    dispatch({\n      type: SETTINGS_ACTIONS.TOGGLE_SIDEBAR\n    });\n  };\n\n  // Email preference functions\n  const setEmailsPerPage = count => {\n    dispatch({\n      type: SETTINGS_ACTIONS.SET_EMAILS_PER_PAGE,\n      payload: count\n    });\n  };\n  const setDefaultSort = (sortBy, sortOrder) => {\n    dispatch({\n      type: SETTINGS_ACTIONS.SET_DEFAULT_SORT,\n      payload: {\n        sortBy,\n        sortOrder\n      }\n    });\n  };\n  const setAutoRefresh = enabled => {\n    dispatch({\n      type: SETTINGS_ACTIONS.SET_AUTO_REFRESH,\n      payload: enabled\n    });\n  };\n  const setRefreshInterval = interval => {\n    dispatch({\n      type: SETTINGS_ACTIONS.SET_REFRESH_INTERVAL,\n      payload: interval\n    });\n  };\n  const setMarkAsReadOnView = enabled => {\n    dispatch({\n      type: SETTINGS_ACTIONS.SET_MARK_AS_READ_ON_VIEW,\n      payload: enabled\n    });\n  };\n\n  // Notification functions\n  const setNotificationPreference = (key, value) => {\n    dispatch({\n      type: SETTINGS_ACTIONS.SET_NOTIFICATION_PREFERENCE,\n      payload: {\n        key,\n        value\n      }\n    });\n  };\n  const setNotifications = notifications => {\n    dispatch({\n      type: SETTINGS_ACTIONS.SET_NOTIFICATIONS,\n      payload: notifications\n    });\n  };\n\n  // AI setting functions\n  const setAISetting = (key, value) => {\n    dispatch({\n      type: SETTINGS_ACTIONS.SET_AI_SETTING,\n      payload: {\n        key,\n        value\n      }\n    });\n  };\n  const setAISettings = settings => {\n    dispatch({\n      type: SETTINGS_ACTIONS.SET_AI_SETTINGS,\n      payload: settings\n    });\n  };\n  const addCustomRule = rule => {\n    const newRule = {\n      ...rule,\n      id: Date.now().toString(),\n      createdAt: new Date().toISOString()\n    };\n    dispatch({\n      type: SETTINGS_ACTIONS.ADD_CUSTOM_RULE,\n      payload: newRule\n    });\n    toast.success(\"Custom rule added\");\n  };\n  const updateCustomRule = (id, updates) => {\n    dispatch({\n      type: SETTINGS_ACTIONS.UPDATE_CUSTOM_RULE,\n      payload: {\n        id,\n        updates\n      }\n    });\n    toast.success(\"Custom rule updated\");\n  };\n  const removeCustomRule = id => {\n    dispatch({\n      type: SETTINGS_ACTIONS.REMOVE_CUSTOM_RULE,\n      payload: id\n    });\n    toast.success(\"Custom rule removed\");\n  };\n\n  // Security functions\n  const setSecuritySetting = (key, value) => {\n    dispatch({\n      type: SETTINGS_ACTIONS.SET_SECURITY_SETTING,\n      payload: {\n        key,\n        value\n      }\n    });\n  };\n  const setSecuritySettings = settings => {\n    dispatch({\n      type: SETTINGS_ACTIONS.SET_SECURITY_SETTINGS,\n      payload: settings\n    });\n  };\n\n  // Chart functions\n  const setChartSetting = (key, value) => {\n    dispatch({\n      type: SETTINGS_ACTIONS.SET_CHART_SETTING,\n      payload: {\n        key,\n        value\n      }\n    });\n  };\n  const setChartSettings = settings => {\n    dispatch({\n      type: SETTINGS_ACTIONS.SET_CHART_SETTINGS,\n      payload: settings\n    });\n  };\n\n  // Advanced functions\n  const setAdvancedSetting = (key, value) => {\n    dispatch({\n      type: SETTINGS_ACTIONS.SET_ADVANCED_SETTING,\n      payload: {\n        key,\n        value\n      }\n    });\n  };\n\n  // Reset settings\n  const resetSettings = () => {\n    dispatch({\n      type: SETTINGS_ACTIONS.RESET_SETTINGS\n    });\n    toast.success(\"Settings reset to default\");\n  };\n\n  // Export settings\n  const exportSettings = () => {\n    const settingsData = {\n      theme: state.theme,\n      language: state.language,\n      density: state.density,\n      emailsPerPage: state.emailsPerPage,\n      defaultSortBy: state.defaultSortBy,\n      defaultSortOrder: state.defaultSortOrder,\n      autoRefresh: state.autoRefresh,\n      refreshInterval: state.refreshInterval,\n      markAsReadOnView: state.markAsReadOnView,\n      notifications: state.notifications,\n      aiSettings: state.aiSettings,\n      charts: state.charts,\n      advanced: state.advanced,\n      exportedAt: new Date().toISOString()\n    };\n    const dataStr = JSON.stringify(settingsData, null, 2);\n    const dataBlob = new Blob([dataStr], {\n      type: \"application/json\"\n    });\n    const url = URL.createObjectURL(dataBlob);\n    const link = document.createElement(\"a\");\n    link.href = url;\n    link.download = `email-classifier-settings-${Date.now()}.json`;\n    link.click();\n    toast.success(\"Settings exported successfully\");\n  };\n\n  // Import settings\n  const importSettings = file => {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onload = e => {\n        try {\n          const importedSettings = JSON.parse(e.target.result);\n\n          // Validate and merge settings\n          const validSettings = {\n            theme: importedSettings.theme || state.theme,\n            language: importedSettings.language || state.language,\n            density: importedSettings.density || state.density,\n            emailsPerPage: importedSettings.emailsPerPage || state.emailsPerPage,\n            defaultSortBy: importedSettings.defaultSortBy || state.defaultSortBy,\n            defaultSortOrder: importedSettings.defaultSortOrder || state.defaultSortOrder,\n            autoRefresh: importedSettings.autoRefresh !== undefined ? importedSettings.autoRefresh : state.autoRefresh,\n            refreshInterval: importedSettings.refreshInterval || state.refreshInterval,\n            markAsReadOnView: importedSettings.markAsReadOnView !== undefined ? importedSettings.markAsReadOnView : state.markAsReadOnView,\n            notifications: {\n              ...state.notifications,\n              ...importedSettings.notifications\n            },\n            aiSettings: {\n              ...state.aiSettings,\n              ...importedSettings.aiSettings\n            },\n            charts: {\n              ...state.charts,\n              ...importedSettings.charts\n            },\n            advanced: {\n              ...state.advanced,\n              ...importedSettings.advanced\n            }\n          };\n          dispatch({\n            type: SETTINGS_ACTIONS.LOAD_SETTINGS_SUCCESS,\n            payload: validSettings\n          });\n          toast.success(\"Settings imported successfully\");\n          resolve(validSettings);\n        } catch (error) {\n          toast.error(\"Failed to import settings: Invalid file format\");\n          reject(error);\n        }\n      };\n      reader.onerror = () => {\n        toast.error(\"Failed to read settings file\");\n        reject(new Error(\"File read error\"));\n      };\n      reader.readAsText(file);\n    });\n  };\n\n  // Clear errors\n  const clearError = () => {\n    dispatch({\n      type: SETTINGS_ACTIONS.CLEAR_ERROR\n    });\n  };\n\n  // Context value\n  const value = {\n    ...state,\n    loadSettings,\n    saveSettings,\n    setTheme,\n    toggleTheme,\n    setLanguage,\n    setDensity,\n    toggleSidebar,\n    setEmailsPerPage,\n    setDefaultSort,\n    setAutoRefresh,\n    setRefreshInterval,\n    setMarkAsReadOnView,\n    setNotificationPreference,\n    setNotifications,\n    setAISetting,\n    setAISettings,\n    addCustomRule,\n    updateCustomRule,\n    removeCustomRule,\n    setSecuritySetting,\n    setSecuritySettings,\n    setChartSetting,\n    setChartSettings,\n    setAdvancedSetting,\n    resetSettings,\n    exportSettings,\n    importSettings,\n    clearError\n  };\n  return /*#__PURE__*/_jsxDEV(SettingsContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 801,\n    columnNumber: 5\n  }, this);\n};\n\n// Custom hook to use settings context\n_s(SettingsProvider, \"4iRlf1j8yd8EOnLzdn/Ri/p3tw0=\");\n_c = SettingsProvider;\nexport const useSettings = () => {\n  _s2();\n  const context = useContext(SettingsContext);\n  if (!context) {\n    throw new Error(\"useSettings must be used within a SettingsProvider\");\n  }\n  return context;\n};\n\n// Custom hooks for specific settings\n_s2(useSettings, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const useTheme = () => {\n  _s3();\n  const {\n    theme,\n    setTheme,\n    toggleTheme\n  } = useSettings();\n  return {\n    theme,\n    setTheme,\n    toggleTheme\n  };\n};\n_s3(useTheme, \"h4chysjHKw862U9wUzlpjSo0Sro=\", false, function () {\n  return [useSettings];\n});\nexport const useNotifications = () => {\n  _s4();\n  const {\n    notifications,\n    setNotificationPreference,\n    setNotifications\n  } = useSettings();\n  return {\n    notifications,\n    setNotificationPreference,\n    setNotifications\n  };\n};\n_s4(useNotifications, \"NIXPH75uXRrufeAKyJyhaG4Tgq0=\", false, function () {\n  return [useSettings];\n});\nexport const useAISettings = () => {\n  _s5();\n  const {\n    aiSettings,\n    setAISetting,\n    setAISettings,\n    addCustomRule,\n    updateCustomRule,\n    removeCustomRule\n  } = useSettings();\n  return {\n    aiSettings,\n    setAISetting,\n    setAISettings,\n    addCustomRule,\n    updateCustomRule,\n    removeCustomRule\n  };\n};\n_s5(useAISettings, \"s1Ilb+et6U4snPt7eY3ebLEUU3I=\", false, function () {\n  return [useSettings];\n});\nexport default SettingsContext;\nvar _c;\n$RefreshReg$(_c, \"SettingsProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","useEffect","axios","toast","jsxDEV","_jsxDEV","SettingsContext","initialState","theme","localStorage","getItem","language","timezone","Intl","DateTimeFormat","resolvedOptions","timeZone","density","sidebarCollapsed","JSON","parse","emailsPerPage","parseInt","defaultSortBy","defaultSortOrder","autoRefresh","refreshInterval","markAsReadOnView","notifications","desktop","sound","email","newEmails","importantEmails","weeklyDigest","aiSettings","autoClassify","confidenceThreshold","parseFloat","enableLearning","retrainFrequency","customRules","security","twoFactorEnabled","sessionTimeout","loginNotifications","dataRetention","charts","defaultTimeRange","showAnimations","colorScheme","advanced","debugMode","betaFeatures","telemetry","loading","error","lastSaved","SETTINGS_ACTIONS","SET_LOADING","SET_ERROR","CLEAR_ERROR","SET_THEME","SET_LANGUAGE","SET_DENSITY","TOGGLE_SIDEBAR","SET_EMAILS_PER_PAGE","SET_DEFAULT_SORT","SET_AUTO_REFRESH","SET_REFRESH_INTERVAL","SET_MARK_AS_READ_ON_VIEW","SET_NOTIFICATION_PREFERENCE","SET_NOTIFICATIONS","SET_AI_SETTING","SET_AI_SETTINGS","ADD_CUSTOM_RULE","UPDATE_CUSTOM_RULE","REMOVE_CUSTOM_RULE","SET_SECURITY_SETTING","SET_SECURITY_SETTINGS","SET_CHART_SETTING","SET_CHART_SETTINGS","SET_ADVANCED_SETTING","LOAD_SETTINGS_SUCCESS","SAVE_SETTINGS_SUCCESS","RESET_SETTINGS","saveToLocalStorage","key","value","setItem","stringify","console","settingsReducer","state","action","newState","type","payload","collapsed","sortBy","sortOrder","Object","entries","forEach","map","rule","id","updates","filter","charAt","toUpperCase","slice","Date","toISOString","keysToRemove","removeItem","API_URL","api","create","baseURL","timeout","interceptors","request","use","config","token","headers","Authorization","SettingsProvider","children","_s","dispatch","loadSettings","document","documentElement","setAttribute","classList","add","remove","window","Notification","requestPermission","response","get","data","settings","success","warn","message","saveSettings","settingsToSave","put","_error$response","_error$response$data","setTheme","toggleTheme","newTheme","setLanguage","setDensity","toggleSidebar","setEmailsPerPage","count","setDefaultSort","setAutoRefresh","enabled","setRefreshInterval","interval","setMarkAsReadOnView","setNotificationPreference","setNotifications","setAISetting","setAISettings","addCustomRule","newRule","now","toString","createdAt","updateCustomRule","removeCustomRule","setSecuritySetting","setSecuritySettings","setChartSetting","setChartSettings","setAdvancedSetting","resetSettings","exportSettings","settingsData","exportedAt","dataStr","dataBlob","Blob","url","URL","createObjectURL","link","createElement","href","download","click","importSettings","file","Promise","resolve","reject","reader","FileReader","onload","e","importedSettings","target","result","validSettings","undefined","onerror","Error","readAsText","clearError","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useSettings","_s2","context","useTheme","_s3","useNotifications","_s4","useAISettings","_s5","$RefreshReg$"],"sources":["/home/guddy/code/project/client/src/contexts/SettingsContext.js"],"sourcesContent":["import React, { createContext, useContext, useReducer, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { toast } from \"react-hot-toast\";\n\n// Create context\nconst SettingsContext = createContext();\n\n// Initial state\nconst initialState = {\n  // UI preferences\n  theme: localStorage.getItem(\"theme\") || \"light\",\n  language: localStorage.getItem(\"language\") || \"en\",\n  timezone: Intl.DateTimeFormat().resolvedOptions().timeZone,\n  density: localStorage.getItem(\"density\") || \"comfortable\", // compact, comfortable, spacious\n  sidebarCollapsed: JSON.parse(\n    localStorage.getItem(\"sidebarCollapsed\") || \"false\",\n  ),\n\n  // Email preferences\n  emailsPerPage: parseInt(localStorage.getItem(\"emailsPerPage\") || \"20\"),\n  defaultSortBy: localStorage.getItem(\"defaultSortBy\") || \"date\",\n  defaultSortOrder: localStorage.getItem(\"defaultSortOrder\") || \"desc\",\n  autoRefresh: JSON.parse(localStorage.getItem(\"autoRefresh\") || \"true\"),\n  refreshInterval: parseInt(localStorage.getItem(\"refreshInterval\") || \"300\"), // seconds\n  markAsReadOnView: JSON.parse(\n    localStorage.getItem(\"markAsReadOnView\") || \"true\",\n  ),\n\n  // Notification preferences\n  notifications: {\n    desktop: JSON.parse(localStorage.getItem(\"desktopNotifications\") || \"true\"),\n    sound: JSON.parse(localStorage.getItem(\"soundNotifications\") || \"true\"),\n    email: JSON.parse(localStorage.getItem(\"emailNotifications\") || \"true\"),\n    newEmails: JSON.parse(\n      localStorage.getItem(\"newEmailNotifications\") || \"true\",\n    ),\n    importantEmails: JSON.parse(\n      localStorage.getItem(\"importantEmailNotifications\") || \"true\",\n    ),\n    weeklyDigest: JSON.parse(\n      localStorage.getItem(\"weeklyDigestNotifications\") || \"true\",\n    ),\n  },\n\n  // AI/ML preferences\n  aiSettings: {\n    autoClassify: JSON.parse(localStorage.getItem(\"autoClassify\") || \"true\"),\n    confidenceThreshold: parseFloat(\n      localStorage.getItem(\"confidenceThreshold\") || \"0.8\",\n    ),\n    enableLearning: JSON.parse(\n      localStorage.getItem(\"enableLearning\") || \"true\",\n    ),\n    retrainFrequency: localStorage.getItem(\"retrainFrequency\") || \"weekly\", // daily, weekly, monthly\n    customRules: JSON.parse(localStorage.getItem(\"customRules\") || \"[]\"),\n  },\n\n  // Security preferences\n  security: {\n    twoFactorEnabled: false,\n    sessionTimeout: parseInt(localStorage.getItem(\"sessionTimeout\") || \"480\"), // minutes\n    loginNotifications: JSON.parse(\n      localStorage.getItem(\"loginNotifications\") || \"true\",\n    ),\n    dataRetention: parseInt(localStorage.getItem(\"dataRetention\") || \"365\"), // days\n  },\n\n  // Data visualization preferences\n  charts: {\n    defaultTimeRange: localStorage.getItem(\"chartTimeRange\") || \"30d\",\n    showAnimations: JSON.parse(\n      localStorage.getItem(\"chartAnimations\") || \"true\",\n    ),\n    colorScheme: localStorage.getItem(\"chartColorScheme\") || \"default\",\n  },\n\n  // Advanced preferences\n  advanced: {\n    debugMode: JSON.parse(localStorage.getItem(\"debugMode\") || \"false\"),\n    betaFeatures: JSON.parse(localStorage.getItem(\"betaFeatures\") || \"false\"),\n    telemetry: JSON.parse(localStorage.getItem(\"telemetry\") || \"true\"),\n  },\n\n  loading: false,\n  error: null,\n  lastSaved: null,\n};\n\n// Action types\nconst SETTINGS_ACTIONS = {\n  SET_LOADING: \"SET_LOADING\",\n  SET_ERROR: \"SET_ERROR\",\n  CLEAR_ERROR: \"CLEAR_ERROR\",\n\n  // Theme and UI\n  SET_THEME: \"SET_THEME\",\n  SET_LANGUAGE: \"SET_LANGUAGE\",\n  SET_DENSITY: \"SET_DENSITY\",\n  TOGGLE_SIDEBAR: \"TOGGLE_SIDEBAR\",\n\n  // Email preferences\n  SET_EMAILS_PER_PAGE: \"SET_EMAILS_PER_PAGE\",\n  SET_DEFAULT_SORT: \"SET_DEFAULT_SORT\",\n  SET_AUTO_REFRESH: \"SET_AUTO_REFRESH\",\n  SET_REFRESH_INTERVAL: \"SET_REFRESH_INTERVAL\",\n  SET_MARK_AS_READ_ON_VIEW: \"SET_MARK_AS_READ_ON_VIEW\",\n\n  // Notifications\n  SET_NOTIFICATION_PREFERENCE: \"SET_NOTIFICATION_PREFERENCE\",\n  SET_NOTIFICATIONS: \"SET_NOTIFICATIONS\",\n\n  // AI settings\n  SET_AI_SETTING: \"SET_AI_SETTING\",\n  SET_AI_SETTINGS: \"SET_AI_SETTINGS\",\n  ADD_CUSTOM_RULE: \"ADD_CUSTOM_RULE\",\n  UPDATE_CUSTOM_RULE: \"UPDATE_CUSTOM_RULE\",\n  REMOVE_CUSTOM_RULE: \"REMOVE_CUSTOM_RULE\",\n\n  // Security\n  SET_SECURITY_SETTING: \"SET_SECURITY_SETTING\",\n  SET_SECURITY_SETTINGS: \"SET_SECURITY_SETTINGS\",\n\n  // Charts\n  SET_CHART_SETTING: \"SET_CHART_SETTING\",\n  SET_CHART_SETTINGS: \"SET_CHART_SETTINGS\",\n\n  // Advanced\n  SET_ADVANCED_SETTING: \"SET_ADVANCED_SETTING\",\n\n  // Bulk operations\n  LOAD_SETTINGS_SUCCESS: \"LOAD_SETTINGS_SUCCESS\",\n  SAVE_SETTINGS_SUCCESS: \"SAVE_SETTINGS_SUCCESS\",\n  RESET_SETTINGS: \"RESET_SETTINGS\",\n};\n\n// Helper functions\nconst saveToLocalStorage = (key, value) => {\n  try {\n    localStorage.setItem(\n      key,\n      typeof value === \"string\" ? value : JSON.stringify(value),\n    );\n  } catch (error) {\n    console.error(\"Failed to save to localStorage:\", error);\n  }\n};\n\n// Reducer function\nconst settingsReducer = (state, action) => {\n  let newState;\n\n  switch (action.type) {\n    case SETTINGS_ACTIONS.SET_LOADING:\n      return { ...state, loading: action.payload };\n\n    case SETTINGS_ACTIONS.SET_ERROR:\n      return { ...state, error: action.payload, loading: false };\n\n    case SETTINGS_ACTIONS.CLEAR_ERROR:\n      return { ...state, error: null };\n\n    case SETTINGS_ACTIONS.SET_THEME:\n      saveToLocalStorage(\"theme\", action.payload);\n      return { ...state, theme: action.payload };\n\n    case SETTINGS_ACTIONS.SET_LANGUAGE:\n      saveToLocalStorage(\"language\", action.payload);\n      return { ...state, language: action.payload };\n\n    case SETTINGS_ACTIONS.SET_DENSITY:\n      saveToLocalStorage(\"density\", action.payload);\n      return { ...state, density: action.payload };\n\n    case SETTINGS_ACTIONS.TOGGLE_SIDEBAR:\n      const collapsed = !state.sidebarCollapsed;\n      saveToLocalStorage(\"sidebarCollapsed\", collapsed);\n      return { ...state, sidebarCollapsed: collapsed };\n\n    case SETTINGS_ACTIONS.SET_EMAILS_PER_PAGE:\n      saveToLocalStorage(\"emailsPerPage\", action.payload);\n      return { ...state, emailsPerPage: action.payload };\n\n    case SETTINGS_ACTIONS.SET_DEFAULT_SORT:\n      saveToLocalStorage(\"defaultSortBy\", action.payload.sortBy);\n      saveToLocalStorage(\"defaultSortOrder\", action.payload.sortOrder);\n      return {\n        ...state,\n        defaultSortBy: action.payload.sortBy,\n        defaultSortOrder: action.payload.sortOrder,\n      };\n\n    case SETTINGS_ACTIONS.SET_AUTO_REFRESH:\n      saveToLocalStorage(\"autoRefresh\", action.payload);\n      return { ...state, autoRefresh: action.payload };\n\n    case SETTINGS_ACTIONS.SET_REFRESH_INTERVAL:\n      saveToLocalStorage(\"refreshInterval\", action.payload);\n      return { ...state, refreshInterval: action.payload };\n\n    case SETTINGS_ACTIONS.SET_MARK_AS_READ_ON_VIEW:\n      saveToLocalStorage(\"markAsReadOnView\", action.payload);\n      return { ...state, markAsReadOnView: action.payload };\n\n    case SETTINGS_ACTIONS.SET_NOTIFICATION_PREFERENCE:\n      newState = {\n        ...state,\n        notifications: {\n          ...state.notifications,\n          [action.payload.key]: action.payload.value,\n        },\n      };\n      saveToLocalStorage(\n        `${action.payload.key}Notifications`,\n        action.payload.value,\n      );\n      return newState;\n\n    case SETTINGS_ACTIONS.SET_NOTIFICATIONS:\n      newState = {\n        ...state,\n        notifications: { ...state.notifications, ...action.payload },\n      };\n      // Save each notification preference\n      Object.entries(action.payload).forEach(([key, value]) => {\n        saveToLocalStorage(`${key}Notifications`, value);\n      });\n      return newState;\n\n    case SETTINGS_ACTIONS.SET_AI_SETTING:\n      newState = {\n        ...state,\n        aiSettings: {\n          ...state.aiSettings,\n          [action.payload.key]: action.payload.value,\n        },\n      };\n      saveToLocalStorage(action.payload.key, action.payload.value);\n      return newState;\n\n    case SETTINGS_ACTIONS.SET_AI_SETTINGS:\n      newState = {\n        ...state,\n        aiSettings: { ...state.aiSettings, ...action.payload },\n      };\n      // Save each AI setting\n      Object.entries(action.payload).forEach(([key, value]) => {\n        saveToLocalStorage(key, value);\n      });\n      return newState;\n\n    case SETTINGS_ACTIONS.ADD_CUSTOM_RULE:\n      newState = {\n        ...state,\n        aiSettings: {\n          ...state.aiSettings,\n          customRules: [...state.aiSettings.customRules, action.payload],\n        },\n      };\n      saveToLocalStorage(\"customRules\", newState.aiSettings.customRules);\n      return newState;\n\n    case SETTINGS_ACTIONS.UPDATE_CUSTOM_RULE:\n      newState = {\n        ...state,\n        aiSettings: {\n          ...state.aiSettings,\n          customRules: state.aiSettings.customRules.map((rule) =>\n            rule.id === action.payload.id\n              ? { ...rule, ...action.payload.updates }\n              : rule,\n          ),\n        },\n      };\n      saveToLocalStorage(\"customRules\", newState.aiSettings.customRules);\n      return newState;\n\n    case SETTINGS_ACTIONS.REMOVE_CUSTOM_RULE:\n      newState = {\n        ...state,\n        aiSettings: {\n          ...state.aiSettings,\n          customRules: state.aiSettings.customRules.filter(\n            (rule) => rule.id !== action.payload,\n          ),\n        },\n      };\n      saveToLocalStorage(\"customRules\", newState.aiSettings.customRules);\n      return newState;\n\n    case SETTINGS_ACTIONS.SET_SECURITY_SETTING:\n      newState = {\n        ...state,\n        security: {\n          ...state.security,\n          [action.payload.key]: action.payload.value,\n        },\n      };\n      if (action.payload.key !== \"twoFactorEnabled\") {\n        saveToLocalStorage(action.payload.key, action.payload.value);\n      }\n      return newState;\n\n    case SETTINGS_ACTIONS.SET_SECURITY_SETTINGS:\n      newState = {\n        ...state,\n        security: { ...state.security, ...action.payload },\n      };\n      // Save security settings (excluding sensitive ones)\n      Object.entries(action.payload).forEach(([key, value]) => {\n        if (key !== \"twoFactorEnabled\") {\n          saveToLocalStorage(key, value);\n        }\n      });\n      return newState;\n\n    case SETTINGS_ACTIONS.SET_CHART_SETTING:\n      newState = {\n        ...state,\n        charts: {\n          ...state.charts,\n          [action.payload.key]: action.payload.value,\n        },\n      };\n      saveToLocalStorage(\n        `chart${action.payload.key.charAt(0).toUpperCase() + action.payload.key.slice(1)}`,\n        action.payload.value,\n      );\n      return newState;\n\n    case SETTINGS_ACTIONS.SET_CHART_SETTINGS:\n      newState = {\n        ...state,\n        charts: { ...state.charts, ...action.payload },\n      };\n      Object.entries(action.payload).forEach(([key, value]) => {\n        saveToLocalStorage(\n          `chart${key.charAt(0).toUpperCase() + key.slice(1)}`,\n          value,\n        );\n      });\n      return newState;\n\n    case SETTINGS_ACTIONS.SET_ADVANCED_SETTING:\n      newState = {\n        ...state,\n        advanced: {\n          ...state.advanced,\n          [action.payload.key]: action.payload.value,\n        },\n      };\n      saveToLocalStorage(action.payload.key, action.payload.value);\n      return newState;\n\n    case SETTINGS_ACTIONS.LOAD_SETTINGS_SUCCESS:\n      return {\n        ...state,\n        ...action.payload,\n        loading: false,\n        lastSaved: new Date().toISOString(),\n      };\n\n    case SETTINGS_ACTIONS.SAVE_SETTINGS_SUCCESS:\n      return {\n        ...state,\n        loading: false,\n        lastSaved: new Date().toISOString(),\n      };\n\n    case SETTINGS_ACTIONS.RESET_SETTINGS:\n      // Clear localStorage\n      const keysToRemove = [\n        \"theme\",\n        \"language\",\n        \"density\",\n        \"sidebarCollapsed\",\n        \"emailsPerPage\",\n        \"defaultSortBy\",\n        \"defaultSortOrder\",\n        \"autoRefresh\",\n        \"refreshInterval\",\n        \"markAsReadOnView\",\n        \"desktopNotifications\",\n        \"soundNotifications\",\n        \"emailNotifications\",\n        \"newEmailNotifications\",\n        \"importantEmailNotifications\",\n        \"weeklyDigestNotifications\",\n        \"autoClassify\",\n        \"confidenceThreshold\",\n        \"enableLearning\",\n        \"retrainFrequency\",\n        \"customRules\",\n        \"sessionTimeout\",\n        \"loginNotifications\",\n        \"dataRetention\",\n        \"chartTimeRange\",\n        \"chartAnimations\",\n        \"chartColorScheme\",\n        \"debugMode\",\n        \"betaFeatures\",\n        \"telemetry\",\n      ];\n\n      keysToRemove.forEach((key) => {\n        localStorage.removeItem(key);\n      });\n\n      return {\n        ...initialState,\n        loading: false,\n        error: null,\n      };\n\n    default:\n      return state;\n  }\n};\n\n// API base URL\nconst API_URL = \"/api\";\n\n// Create axios instance\nconst api = axios.create({\n  baseURL: API_URL,\n  timeout: 10000,\n});\n\n// Add token to requests\napi.interceptors.request.use((config) => {\n  const token = localStorage.getItem(\"token\");\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\n// Settings Provider Component\nexport const SettingsProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(settingsReducer, initialState);\n\n  // Load settings from server on mount\n  useEffect(() => {\n    loadSettings();\n  }, []);\n\n  // Apply theme changes\n  useEffect(() => {\n    document.documentElement.setAttribute(\"data-theme\", state.theme);\n\n    if (state.theme === \"dark\") {\n      document.documentElement.classList.add(\"dark\");\n    } else {\n      document.documentElement.classList.remove(\"dark\");\n    }\n  }, [state.theme]);\n\n  // Apply density changes\n  useEffect(() => {\n    document.documentElement.setAttribute(\"data-density\", state.density);\n  }, [state.density]);\n\n  // Request notification permissions\n  useEffect(() => {\n    if (state.notifications.desktop && \"Notification\" in window) {\n      Notification.requestPermission();\n    }\n  }, [state.notifications.desktop]);\n\n  // Load settings from server\n  const loadSettings = async () => {\n    dispatch({ type: SETTINGS_ACTIONS.SET_LOADING, payload: true });\n\n    try {\n      const response = await api.get(\"/settings\");\n      dispatch({\n        type: SETTINGS_ACTIONS.LOAD_SETTINGS_SUCCESS,\n        payload: response.data.settings,\n      });\n      return { success: true, data: response.data.settings };\n    } catch (error) {\n      // If server settings fail to load, use local settings\n      dispatch({ type: SETTINGS_ACTIONS.SET_LOADING, payload: false });\n      console.warn(\"Failed to load server settings, using local settings\");\n      return { success: false, error: error.message };\n    }\n  };\n\n  // Save settings to server\n  const saveSettings = async (settingsToSave = null) => {\n    dispatch({ type: SETTINGS_ACTIONS.SET_LOADING, payload: true });\n\n    try {\n      const settings = settingsToSave || {\n        theme: state.theme,\n        language: state.language,\n        timezone: state.timezone,\n        density: state.density,\n        sidebarCollapsed: state.sidebarCollapsed,\n        emailsPerPage: state.emailsPerPage,\n        defaultSortBy: state.defaultSortBy,\n        defaultSortOrder: state.defaultSortOrder,\n        autoRefresh: state.autoRefresh,\n        refreshInterval: state.refreshInterval,\n        markAsReadOnView: state.markAsReadOnView,\n        notifications: state.notifications,\n        aiSettings: state.aiSettings,\n        security: state.security,\n        charts: state.charts,\n        advanced: state.advanced,\n      };\n\n      await api.put(\"/settings\", { settings });\n\n      dispatch({ type: SETTINGS_ACTIONS.SAVE_SETTINGS_SUCCESS });\n      toast.success(\"Settings saved successfully\");\n      return { success: true };\n    } catch (error) {\n      dispatch({\n        type: SETTINGS_ACTIONS.SET_ERROR,\n        payload: error.response?.data?.message || \"Failed to save settings\",\n      });\n      toast.error(\"Failed to save settings\");\n      return { success: false, error: error.message };\n    }\n  };\n\n  // Theme functions\n  const setTheme = (theme) => {\n    dispatch({ type: SETTINGS_ACTIONS.SET_THEME, payload: theme });\n  };\n\n  const toggleTheme = () => {\n    const newTheme = state.theme === \"light\" ? \"dark\" : \"light\";\n    setTheme(newTheme);\n  };\n\n  // UI functions\n  const setLanguage = (language) => {\n    dispatch({ type: SETTINGS_ACTIONS.SET_LANGUAGE, payload: language });\n  };\n\n  const setDensity = (density) => {\n    dispatch({ type: SETTINGS_ACTIONS.SET_DENSITY, payload: density });\n  };\n\n  const toggleSidebar = () => {\n    dispatch({ type: SETTINGS_ACTIONS.TOGGLE_SIDEBAR });\n  };\n\n  // Email preference functions\n  const setEmailsPerPage = (count) => {\n    dispatch({ type: SETTINGS_ACTIONS.SET_EMAILS_PER_PAGE, payload: count });\n  };\n\n  const setDefaultSort = (sortBy, sortOrder) => {\n    dispatch({\n      type: SETTINGS_ACTIONS.SET_DEFAULT_SORT,\n      payload: { sortBy, sortOrder },\n    });\n  };\n\n  const setAutoRefresh = (enabled) => {\n    dispatch({ type: SETTINGS_ACTIONS.SET_AUTO_REFRESH, payload: enabled });\n  };\n\n  const setRefreshInterval = (interval) => {\n    dispatch({\n      type: SETTINGS_ACTIONS.SET_REFRESH_INTERVAL,\n      payload: interval,\n    });\n  };\n\n  const setMarkAsReadOnView = (enabled) => {\n    dispatch({\n      type: SETTINGS_ACTIONS.SET_MARK_AS_READ_ON_VIEW,\n      payload: enabled,\n    });\n  };\n\n  // Notification functions\n  const setNotificationPreference = (key, value) => {\n    dispatch({\n      type: SETTINGS_ACTIONS.SET_NOTIFICATION_PREFERENCE,\n      payload: { key, value },\n    });\n  };\n\n  const setNotifications = (notifications) => {\n    dispatch({\n      type: SETTINGS_ACTIONS.SET_NOTIFICATIONS,\n      payload: notifications,\n    });\n  };\n\n  // AI setting functions\n  const setAISetting = (key, value) => {\n    dispatch({\n      type: SETTINGS_ACTIONS.SET_AI_SETTING,\n      payload: { key, value },\n    });\n  };\n\n  const setAISettings = (settings) => {\n    dispatch({ type: SETTINGS_ACTIONS.SET_AI_SETTINGS, payload: settings });\n  };\n\n  const addCustomRule = (rule) => {\n    const newRule = {\n      ...rule,\n      id: Date.now().toString(),\n      createdAt: new Date().toISOString(),\n    };\n    dispatch({ type: SETTINGS_ACTIONS.ADD_CUSTOM_RULE, payload: newRule });\n    toast.success(\"Custom rule added\");\n  };\n\n  const updateCustomRule = (id, updates) => {\n    dispatch({\n      type: SETTINGS_ACTIONS.UPDATE_CUSTOM_RULE,\n      payload: { id, updates },\n    });\n    toast.success(\"Custom rule updated\");\n  };\n\n  const removeCustomRule = (id) => {\n    dispatch({ type: SETTINGS_ACTIONS.REMOVE_CUSTOM_RULE, payload: id });\n    toast.success(\"Custom rule removed\");\n  };\n\n  // Security functions\n  const setSecuritySetting = (key, value) => {\n    dispatch({\n      type: SETTINGS_ACTIONS.SET_SECURITY_SETTING,\n      payload: { key, value },\n    });\n  };\n\n  const setSecuritySettings = (settings) => {\n    dispatch({\n      type: SETTINGS_ACTIONS.SET_SECURITY_SETTINGS,\n      payload: settings,\n    });\n  };\n\n  // Chart functions\n  const setChartSetting = (key, value) => {\n    dispatch({\n      type: SETTINGS_ACTIONS.SET_CHART_SETTING,\n      payload: { key, value },\n    });\n  };\n\n  const setChartSettings = (settings) => {\n    dispatch({ type: SETTINGS_ACTIONS.SET_CHART_SETTINGS, payload: settings });\n  };\n\n  // Advanced functions\n  const setAdvancedSetting = (key, value) => {\n    dispatch({\n      type: SETTINGS_ACTIONS.SET_ADVANCED_SETTING,\n      payload: { key, value },\n    });\n  };\n\n  // Reset settings\n  const resetSettings = () => {\n    dispatch({ type: SETTINGS_ACTIONS.RESET_SETTINGS });\n    toast.success(\"Settings reset to default\");\n  };\n\n  // Export settings\n  const exportSettings = () => {\n    const settingsData = {\n      theme: state.theme,\n      language: state.language,\n      density: state.density,\n      emailsPerPage: state.emailsPerPage,\n      defaultSortBy: state.defaultSortBy,\n      defaultSortOrder: state.defaultSortOrder,\n      autoRefresh: state.autoRefresh,\n      refreshInterval: state.refreshInterval,\n      markAsReadOnView: state.markAsReadOnView,\n      notifications: state.notifications,\n      aiSettings: state.aiSettings,\n      charts: state.charts,\n      advanced: state.advanced,\n      exportedAt: new Date().toISOString(),\n    };\n\n    const dataStr = JSON.stringify(settingsData, null, 2);\n    const dataBlob = new Blob([dataStr], { type: \"application/json\" });\n    const url = URL.createObjectURL(dataBlob);\n    const link = document.createElement(\"a\");\n    link.href = url;\n    link.download = `email-classifier-settings-${Date.now()}.json`;\n    link.click();\n\n    toast.success(\"Settings exported successfully\");\n  };\n\n  // Import settings\n  const importSettings = (file) => {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n\n      reader.onload = (e) => {\n        try {\n          const importedSettings = JSON.parse(e.target.result);\n\n          // Validate and merge settings\n          const validSettings = {\n            theme: importedSettings.theme || state.theme,\n            language: importedSettings.language || state.language,\n            density: importedSettings.density || state.density,\n            emailsPerPage:\n              importedSettings.emailsPerPage || state.emailsPerPage,\n            defaultSortBy:\n              importedSettings.defaultSortBy || state.defaultSortBy,\n            defaultSortOrder:\n              importedSettings.defaultSortOrder || state.defaultSortOrder,\n            autoRefresh:\n              importedSettings.autoRefresh !== undefined\n                ? importedSettings.autoRefresh\n                : state.autoRefresh,\n            refreshInterval:\n              importedSettings.refreshInterval || state.refreshInterval,\n            markAsReadOnView:\n              importedSettings.markAsReadOnView !== undefined\n                ? importedSettings.markAsReadOnView\n                : state.markAsReadOnView,\n            notifications: {\n              ...state.notifications,\n              ...importedSettings.notifications,\n            },\n            aiSettings: { ...state.aiSettings, ...importedSettings.aiSettings },\n            charts: { ...state.charts, ...importedSettings.charts },\n            advanced: { ...state.advanced, ...importedSettings.advanced },\n          };\n\n          dispatch({\n            type: SETTINGS_ACTIONS.LOAD_SETTINGS_SUCCESS,\n            payload: validSettings,\n          });\n\n          toast.success(\"Settings imported successfully\");\n          resolve(validSettings);\n        } catch (error) {\n          toast.error(\"Failed to import settings: Invalid file format\");\n          reject(error);\n        }\n      };\n\n      reader.onerror = () => {\n        toast.error(\"Failed to read settings file\");\n        reject(new Error(\"File read error\"));\n      };\n\n      reader.readAsText(file);\n    });\n  };\n\n  // Clear errors\n  const clearError = () => {\n    dispatch({ type: SETTINGS_ACTIONS.CLEAR_ERROR });\n  };\n\n  // Context value\n  const value = {\n    ...state,\n    loadSettings,\n    saveSettings,\n    setTheme,\n    toggleTheme,\n    setLanguage,\n    setDensity,\n    toggleSidebar,\n    setEmailsPerPage,\n    setDefaultSort,\n    setAutoRefresh,\n    setRefreshInterval,\n    setMarkAsReadOnView,\n    setNotificationPreference,\n    setNotifications,\n    setAISetting,\n    setAISettings,\n    addCustomRule,\n    updateCustomRule,\n    removeCustomRule,\n    setSecuritySetting,\n    setSecuritySettings,\n    setChartSetting,\n    setChartSettings,\n    setAdvancedSetting,\n    resetSettings,\n    exportSettings,\n    importSettings,\n    clearError,\n  };\n\n  return (\n    <SettingsContext.Provider value={value}>\n      {children}\n    </SettingsContext.Provider>\n  );\n};\n\n// Custom hook to use settings context\nexport const useSettings = () => {\n  const context = useContext(SettingsContext);\n\n  if (!context) {\n    throw new Error(\"useSettings must be used within a SettingsProvider\");\n  }\n\n  return context;\n};\n\n// Custom hooks for specific settings\nexport const useTheme = () => {\n  const { theme, setTheme, toggleTheme } = useSettings();\n  return { theme, setTheme, toggleTheme };\n};\n\nexport const useNotifications = () => {\n  const { notifications, setNotificationPreference, setNotifications } =\n    useSettings();\n  return { notifications, setNotificationPreference, setNotifications };\n};\n\nexport const useAISettings = () => {\n  const {\n    aiSettings,\n    setAISetting,\n    setAISettings,\n    addCustomRule,\n    updateCustomRule,\n    removeCustomRule,\n  } = useSettings();\n\n  return {\n    aiSettings,\n    setAISetting,\n    setAISettings,\n    addCustomRule,\n    updateCustomRule,\n    removeCustomRule,\n  };\n};\n\nexport default SettingsContext;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}